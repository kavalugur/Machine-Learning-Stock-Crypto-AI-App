# -*- coding: utf-8 -*-
"""BitirmeFinal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/bitirmefinal-ff0afcfb-3574-4494-953b-a270a64273d0.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240612/auto/storage/goog4_request%26X-Goog-Date%3D20240612T204725Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D00ec1d9e5519c4931725b2d71e0a08012044d95450f29675a930ccb805210f1447da72b6c43425f0e0e9c9d05921b09940c4e9257f6985f042eb0271b8cbd03ff9543e747e843c9f169aff6687ad98d8bff3058dd2ffb24e256a5bfbbf9b73931ed4df2ac4d06644cdabc5998f1c7c106e7c8f0cf414b8fa0cb109a8272a4e49bfb6acddebc2b4a9ae296ea48000d471810c910e779e05528ce79893903d247432d98e4c023bd851b3102591a826ce318ba0362003dd7b288b2c7e4827831a1341e257cb5b3f6c02549c19274e9563402f2838a45406b11702bcb2e530dfe30c99ec8501f32d5afb0611d8f41ad584c35ee0d8f1b12c14fe74dac4a8a3c7ea96
"""

# Commented out IPython magic to ensure Python compatibility.
!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
!tar -xzvf ta-lib-0.4.0-src.tar.gz
# %cd ta-lib
!./configure --prefix=/usr
!make
!make install

!pip install TA-Lib
!pip install fastapi uvicorn
!pip install "fastapi[all]"  # Tüm bağımlılıkları yüklemek için
!pip install typing_extensions  # Eksik bağımlılığı yüklemek için
!pip install pyngrok
!npm install -g localtunnel
# Node.js ve npm yüklemesi
!curl -sL https://deb.nodesource.com/setup_14.x | bash -
!apt-get install -y nodejs
!npm install -g localtunnel

# LocalTunnel ile tünel oluşturma
get_ipython().system_raw('lt --port 8000 > url.txt 2>&1 &')
!pip install yfinance


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import TimeSeriesSplit
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GRU, LSTM
import talib
import requests
from pytz import timezone
import yfinance as yf
from scipy.signal import argrelextrema
from scipy.stats import linregress





"""ETH"""
"""ERH"""
"""ETH"""
"""ETH"""

def fetch_data(api_key, fsym, tsym, limit, aggregate, toTs=None):
    url = "https://min-api.cryptocompare.com/data/v2/histohour"
    parameters = {
        "fsym": fsym,
        "tsym": tsym,
        "limit": limit,
        "aggregate": aggregate,
        "api_key": api_key
    }
    if toTs:
        parameters["toTs"] = toTs

    response = requests.get(url, params=parameters)
    return response.json()

api_key = "45e670f743b40ccd1e26b8ed2a2c330cc05b7c62bb3c27dd94f4102ca72cc75c"
fsym = "ETH"  # Kripto para birimi sembolü
tsym = "USD"  # Dönüşüm için para birimi sembolü
limit = 2000  # Maksimum veri noktası sayısı
aggregate = 4 # 4 saatlik veri aralıkları
number_of_additional_requests = 20 # Ek istek sayısı

data = fetch_data(api_key, fsym, tsym, limit, aggregate)
all_data = []

if "Data" in data and "Data" in data["Data"]:
    all_data.extend(data["Data"]["Data"])

    # İlk veri grubundan en erken zaman damgasını bul
    earliest_timestamp = all_data[0]['time']

    # Daha fazla veri çek
    for _ in range(number_of_additional_requests):
        data = fetch_data(api_key, fsym, tsym, limit, aggregate, earliest_timestamp)
        if "Data" in data and "Data" in data["Data"]:
            new_data = data["Data"]["Data"]
            if new_data:
                earliest_timestamp = new_data[0]['time']
                all_data.extend(new_data)
            else:
                break
        else:
            break

# Verileri zaman damgasına göre sırala
all_data.sort(key=lambda x: x['time'])

# Sıralanmış verileri yazdır
for item in all_data:
    timestamp = datetime.fromtimestamp(item['time']).strftime('%Y-%m-%d %H:%M:%S')
    high = item['high']
    low = item['low']
    open_price = item['open']  # 'open' değerini 'open_price' olarak değiştirin
    close = item['close']
    volume = item.get('volumeto', 'N/A')
    """print(f"Timestamp: {timestamp}, High: {high}, Low: {low}, Open: {open_price}, Close: {close}, Volume: {volume}")"""
df = pd.DataFrame(all_data)

# Sütunları yeniden adlandır
df.rename(columns={'time': 'Timestamp', 'high': 'High', 'low': 'Low', 'open': 'Open', 'close': 'Close', 'volumeto': 'Volume'}, inplace=True)

# Tarih sütununu DateTime formatına çevir ve indeks olarak ayarla
df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')
df.set_index('Timestamp', inplace=True)

# DataFrame'i stock_data olarak kopyala
stock_data = df.copy()


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def find_support_resistance(data, window=10):
    minima_indices = argrelextrema(data['Low'].values, np.less_equal, order=window)[0]
    maxima_indices = argrelextrema(data['High'].values, np.greater_equal, order=window)[0]

    minima_indices = data.iloc[minima_indices].index
    maxima_indices = data.iloc[maxima_indices].index

    data['Support'] = np.nan
    data['Resistance'] = np.nan
    data.loc[minima_indices, 'Support'] = data.loc[minima_indices, 'Low']
    data.loc[maxima_indices, 'Resistance'] = data.loc[maxima_indices, 'High']
    return data

stock_data = find_support_resistance(stock_data)
# Destek ve Direnç Seviyelerine Göre Alım ve Satım Sinyalleri
stock_data['Buy_Signal_Support'] = (stock_data['Close'] < stock_data['Support']).shift(1).fillna(0).astype(int)
stock_data['Sell_Signal_Resistance'] = (stock_data['Close'] > stock_data['Resistance']).shift(1).fillna(0).astype(int)

#-------#-------#----BB---#-------#-------#-------#-------#-------#-------
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

# Assign the bands to the DataFrame
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Now you can use these columns as intended
# Bollinger Band Buy Signal (Price touches or crosses below lower band)
stock_data['Bollinger_Buy_Signal'] = stock_data['Close'] < stock_data['lower_band']

# Bollinger Band Sell Signal (Price touches or crosses above upper band)
stock_data['Bollinger_Sell_Signal'] = stock_data['Close'] > stock_data['upper_band']


#-------#-------#-----ROC--#-------#-------#-------#-------#-------#-------
stock_data['ROC'] = talib.ROC(stock_data['Close'], timeperiod=10)
stock_data['ROC_Buy_Signal'] = ((stock_data['ROC'].shift(1) < -5) & (stock_data['ROC'] > 0)).astype(int)
stock_data['ROC_Sell_Signal'] = ((stock_data['ROC'].shift(1) > 5) & (stock_data['ROC'] < 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['StochRSI'] = talib.STOCHRSI(stock_data['Close'], timeperiod=14, fastk_period=5, fastd_period=3, fastd_matype=0)[1]
stock_data['StochRSI_Buy_Signal'] = ((stock_data['StochRSI'] > 0.2) & (stock_data['StochRSI'].shift(1) < 0.2)).astype(int)
stock_data['StochRSI_Sell_Signal'] = ((stock_data['StochRSI'] < 0.8) & (stock_data['StochRSI'].shift(1) > 0.8)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def add_awesome_oscillator(data):
    median_price = (data['High'] + data['Low']) / 2
    short_period = 5
    long_period = 34
    short_ma = median_price.rolling(window=short_period).mean()
    long_ma = median_price.rolling(window=long_period).mean()
    data['AO'] = short_ma - long_ma
    return data

stock_data = add_awesome_oscillator(stock_data)
stock_data['AO_Buy_Signal'] = ((stock_data['AO'] > 0) & (stock_data['AO'].shift(1) < 0)).astype(int)
stock_data['AO_Sell_Signal'] = ((stock_data['AO'] < 0) & (stock_data['AO'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------

def ichimoku_cloud(df):
    nine_period_high = df['High'].rolling(window=9).max()
    nine_period_low = df['Low'].rolling(window=9).min()
    df['Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

    twenty_six_period_high = df['High'].rolling(window=26).max()
    twenty_six_period_low = df['Low'].rolling(window=26).min()
    df['Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

    return df
stock_data = ichimoku_cloud(stock_data)
stock_data['Ichimoku_Buy_Signal'] = ((stock_data['Close'] > stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] > stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)
stock_data['Ichimoku_Sell_Signal'] = ((stock_data['Close'] < stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] < stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg_Slope'] = talib.LINEARREG_SLOPE(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Linear_Reg_Slope'] > 0) & (stock_data['Linear_Reg_Slope'].shift(1) < 0)).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Linear_Reg_Slope'] < 0) & (stock_data['Linear_Reg_Slope'].shift(1) > 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

#-------#-------#-------#-------#-------#-------#-------#-------#-------

# Average True Range (ATR)
high_low = stock_data['High'] - stock_data['Low']
high_close = np.abs(stock_data['High'] - stock_data['Close'].shift())
low_close = np.abs(stock_data['Low'] - stock_data['Close'].shift())
ranges = pd.concat([high_low, high_close, low_close], axis=1)
true_range = np.max(ranges, axis=1)
stock_data['ATR'] = true_range.rolling(window=14).mean()
# ATR Değerindeki Değişimlere Göre Alım-Satım Sinyalleri
stock_data['ATR_Change'] = stock_data['ATR'].pct_change()
stock_data['ATR_Buy_Signal'] = (stock_data['ATR_Change'] > 0.1).astype(int)  # Örnek: ATR'de %10'luk bir artış
stock_data['ATR_Sell_Signal'] = (stock_data['ATR_Change'] < -0.1).astype(int)  # Örnek: ATR'de %10'luk bir düşüş

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Close'] > stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] > stock_data['Linear_Reg'].shift(1))).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Close'] < stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] < stock_data['Linear_Reg'].shift(1))).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['MACD'], stock_data['MACD_Signal'], _ = talib.MACD(stock_data['Close'], fastperiod=12, slowperiod=26, signalperiod=9)

# MACD Alım Sinyali (MACD, sinyal çizgisini yukarı yönde kesiyorsa)
stock_data['MACD_Buy_Signal'] = (stock_data['MACD'] > stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) <= stock_data['MACD_Signal'].shift(1))

# MACD Satım Sinyali (MACD, sinyal çizgisini aşağı yönde kesiyorsa)
stock_data['MACD_Sell_Signal'] = (stock_data['MACD'] < stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) >= stock_data['MACD_Signal'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# CCI (Commodity Channel Index)
TP = (stock_data['High'] + stock_data['Low'] + stock_data['Close']) / 3
cci = (TP - TP.rolling(window=20).mean()) / (0.015 * TP.rolling(window=20).std())
stock_data['CCI'] = cci


stock_data['CCI_Buy_Signal'] = ((stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) < -100)).astype(int)

stock_data['CCI_Sell_Signal'] = ((stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) > 100)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def elders_force_index(df, period=13):
    df['EFI'] = (df['Close'] - df['Close'].shift(1)) * df['Volume']
    df['EFI_Smoothed'] = df['EFI'].rolling(window=period).mean()
    return df

stock_data = elders_force_index(stock_data)
stock_data['EFI_Buy_Signal'] = ((stock_data['EFI_Smoothed'] > 0) & (stock_data['EFI_Smoothed'].shift(1) < 0)).astype(int)
stock_data['EFI_Sell_Signal'] = ((stock_data['EFI_Smoothed'] < 0) & (stock_data['EFI_Smoothed'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)

# RSI Alım Sinyali (RSI 30'dan düşükse)
stock_data['RSI_Buy_Signal'] = stock_data['RSI_14'] < 20

# RSI Satım Sinyali (RSI 70'den yüksekse)
stock_data['RSI_Sell_Signal'] = stock_data['RSI_14'] > 80
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)

# Stochastic Alım Sinyali (%K çizgisi %D çizgisini yukarı yönde kesiyorsa)
stock_data['Stoch_Buy_Signal'] = (stock_data['Stoch_K'] > stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) <= stock_data['Stoch_D'].shift(1))

# Stochastic Satım Sinyali (%K çizgisi %D çizgisini aşağı yönde kesiyorsa)
stock_data['Stoch_Sell_Signal'] = (stock_data['Stoch_K'] < stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) >= stock_data['Stoch_D'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# EMA 12 ve EMA 26'yı hesapla
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)

# EMA Alım Sinyali (EMA 12, EMA 26'yı yukarı yönde kesiyorsa)
stock_data['EMA1226_Buy_Signal'] = (stock_data['EMA_12'] > stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) <= stock_data['EMA_26'].shift(1))

# EMA Satım Sinyali (EMA 12, EMA 26'yı aşağı yönde kesiyorsa)
stock_data['EMA1226_Sell_Signal'] = (stock_data['EMA_12'] < stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) >= stock_data['EMA_26'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)

# SMA Alım Sinyali (Fiyat, SMA 50'yi yukarı yönde kesiyorsa)
stock_data['SMA_50_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_50']) & (stock_data['Close'].shift(1) <= stock_data['SMA_50'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 50'yi aşağı yönde kesiyorsa)
stock_data['SMA_50_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_50']) & (stock_data['Close'].shift(1) >= stock_data['SMA_50'].shift(1))

# SMA Alım Sinyali (Fiyat, SMA 200'ü yukarı yönde kesiyorsa)
stock_data['SMA_200_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_200']) & (stock_data['Close'].shift(1) <= stock_data['SMA_200'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 200'ü aşağı yönde kesiyorsa)
stock_data['SMA_200_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_200']) & (stock_data['Close'].shift(1) >= stock_data['SMA_200'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# Ichimoku Alım Sinyali (Fiyat, bulutun üstüne çıkıyorsa)
stock_data['Ichimoku_Buy_Signal'] = (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_B'])

# Ichimoku Satım Sinyali (Fiyat, bulutun altına düşüyorsa)
stock_data['Ichimoku_Sell_Signal'] = (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_B'])
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['ADX'] = talib.ADX(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX ve +DI/-DI göstergeleri için alım/satım sinyalleri
stock_data['Plus_DI'] = talib.PLUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)
stock_data['Minus_DI'] = talib.MINUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX Alım Sinyali (+DI, -DI'yi yukarı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Buy_Signal'] = ((stock_data['Plus_DI'] > stock_data['Minus_DI']) & (stock_data['Plus_DI'].shift(1) <= stock_data['Minus_DI'].shift(1)) & (stock_data['ADX'] > 25))

# ADX Satım Sinyali (-DI, +DI'yi aşağı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Sell_Signal'] = ((stock_data['Minus_DI'] > stock_data['Plus_DI']) & (stock_data['Minus_DI'].shift(1) <= stock_data['Plus_DI'].shift(1)) & (stock_data['ADX'] > 25))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Parabolic_SAR'] = talib.SAR(stock_data['High'], stock_data['Low'], acceleration=0.02, maximum=0.2)

# Parabolic SAR Alım Sinyali (Fiyat, Parabolic SAR'ın üstüne çıkıyorsa)
stock_data['Parabolic_SAR_Buy_Signal'] = stock_data['Close'] > stock_data['Parabolic_SAR']

# Parabolic SAR Satım Sinyali (Fiyat, Parabolic SAR'ın altına düşüyorsa)
stock_data['Parabolic_SAR_Sell_Signal'] = stock_data['Close'] < stock_data['Parabolic_SAR']
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['Williams_R'] = talib.WILLR(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# Williams %R Alım Sinyali (-80'den yukarı çıkıyorsa)
stock_data['Williams_R_Buy_Signal'] = (stock_data['Williams_R'] > -80) & (stock_data['Williams_R'].shift(1) <= -80)

# Williams %R Satım Sinyali (-20'den aşağı düşüyorsa)
stock_data['Williams_R_Sell_Signal'] = (stock_data['Williams_R'] < -20) & (stock_data['Williams_R'].shift(1) >= -20)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['CCI'] = talib.CCI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=20)

# CCI Alım Sinyali (-100'den yukarı çıkıyorsa)
stock_data['CCI_Buy_Signal'] = (stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) <= -100)

# CCI Satım Sinyali (+100'den aşağı düşüyorsa)
stock_data['CCI_Sell_Signal'] = (stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) >= 100)

# EMA 20 Hesaplama
stock_data['EMA_20'] = stock_data['Close'].ewm(span=20, adjust=False).mean()

# EMA 20'ye Göre Alım ve Satım Sinyalleri
# Fiyat EMA 20'nin üzerine çıktığında alım sinyali
stock_data['EMA_20_Buy_Signal'] = ((stock_data['Close'] > stock_data['EMA_20']) & (stock_data['Close'].shift(1) <= stock_data['EMA_20'].shift(1))).astype(int)

# Fiyat EMA 20'nin altına düştüğünde satım sinyali
stock_data['EMA_20_Sell_Signal'] = ((stock_data['Close'] < stock_data['EMA_20']) & (stock_data['Close'].shift(1) >= stock_data['EMA_20'].shift(1))).astype(int)

# Veri setinde NaN değerlerin olup olmadığını kontrol etme
nan_check = stock_data.isna().sum()
nan_check = nan_check[nan_check > 0]  # Sadece NaN değer içeren sütunları göster

nan_check

nan_check = stock_data.isna().sum()
print(nan_check[nan_check > 0])
# İleriye doldurma yöntemiyle NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)

# Hala NaN değerleri varsa, bu satırları kaldırma
stock_data.dropna(inplace=True)

# Kontrol için tekrar NaN değerleri kontrol etme
nan_check = stock_data.isna().sum()
"""print(nan_check[nan_check > 0])
print(stock_data.columns)"""

# Ethereum verilerini yükleyin (Örnek: 'eth_data' burada tanımlanmalıdır)
# eth_data = pd.read_csv('path_to_eth_data.csv')

eth_features = stock_data[['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12',
                       'EMA_26','EMA_20','EMA_50','EMA_100','EMA_20','EMA_100',
                       'Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B','SMA_9',
                       'SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                       'upper_band','lower_band']]

eth_scaler = MinMaxScaler(feature_range=(0, 1))
eth_scaled_features = eth_scaler.fit_transform(eth_features)

def eth_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 0])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

eth_look_back = 36
eth_X, eth_y = eth_create_feature_dataset(eth_scaled_features, eth_look_back)

eth_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in eth_tscv.split(eth_X):
    eth_X_train, eth_X_test = eth_X[train_index], eth_X[test_index]
    eth_y_train, eth_y_test = eth_y[train_index], eth_y[test_index]

    eth_model = Sequential()
    eth_model.add(GRU(units=150, return_sequences=True, input_shape=(eth_X_train.shape[1], eth_X_train.shape[2])))
    eth_model.add(GRU(units=150, return_sequences=False))
    eth_model.add(Dense(units=1))

    eth_model.compile(optimizer='adam', loss='mean_squared_error')
    eth_model.fit(eth_X_train, eth_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
eth_y_pred = eth_model.predict(eth_X_test)
eth_y_test_rescaled = eth_scaler.inverse_transform(np.concatenate((eth_y_test.reshape(-1,1), np.zeros(shape=(len(eth_y_test), eth_scaled_features.shape[1]-1))), axis=1))[:,0]
eth_y_pred_rescaled = eth_scaler.inverse_transform(np.concatenate((eth_y_pred, np.zeros(shape=(len(eth_y_pred), eth_scaled_features.shape[1]-1))), axis=1))[:,0]

eth_mse = mean_squared_error(eth_y_test_rescaled, eth_y_pred_rescaled)
eth_mae = mean_absolute_error(eth_y_test_rescaled, eth_y_pred_rescaled)
eth_r2 = r2_score(eth_y_test_rescaled, eth_y_pred_rescaled)

print(f'MSE: {eth_mse}')
print(f'MAE: {eth_mae}')
print(f'R2 Skoru: {eth_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(eth_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(eth_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('Ethereum Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()


"""SOL"""
"""SOL"""
"""SOL"""
"""SOL"""

def fetch_data(api_key, fsym, tsym, limit, aggregate, toTs=None):
    url = "https://min-api.cryptocompare.com/data/v2/histohour"
    parameters = {
        "fsym": fsym,
        "tsym": tsym,
        "limit": limit,
        "aggregate": aggregate,
        "api_key": api_key
    }
    if toTs:
        parameters["toTs"] = toTs

    response = requests.get(url, params=parameters)
    return response.json()

api_key = "45e670f743b40ccd1e26b8ed2a2c330cc05b7c62bb3c27dd94f4102ca72cc75c"
fsym = "SOL"  # Kripto para birimi sembolü
tsym = "USD"  # Dönüşüm için para birimi sembolü
limit = 2000  # Maksimum veri noktası sayısı
aggregate = 4 # 4 saatlik veri aralıkları
number_of_additional_requests = 20 # Ek istek sayısı

data = fetch_data(api_key, fsym, tsym, limit, aggregate)
all_data = []

if "Data" in data and "Data" in data["Data"]:
    all_data.extend(data["Data"]["Data"])

    # İlk veri grubundan en erken zaman damgasını bul
    earliest_timestamp = all_data[0]['time']

    # Daha fazla veri çek
    for _ in range(number_of_additional_requests):
        data = fetch_data(api_key, fsym, tsym, limit, aggregate, earliest_timestamp)
        if "Data" in data and "Data" in data["Data"]:
            new_data = data["Data"]["Data"]
            if new_data:
                earliest_timestamp = new_data[0]['time']
                all_data.extend(new_data)
            else:
                break
        else:
            break

# Verileri zaman damgasına göre sırala
all_data.sort(key=lambda x: x['time'])

# Sıralanmış verileri yazdır
for item in all_data:
    timestamp = datetime.fromtimestamp(item['time']).strftime('%Y-%m-%d %H:%M:%S')
    high = item['high']
    low = item['low']
    open_price = item['open']  # 'open' değerini 'open_price' olarak değiştirin
    close = item['close']
    volume = item.get('volumeto', 'N/A')
    """print(f"Timestamp: {timestamp}, High: {high}, Low: {low}, Open: {open_price}, Close: {close}, Volume: {volume}")"""
df = pd.DataFrame(all_data)

# Sütunları yeniden adlandır
df.rename(columns={'time': 'Timestamp', 'high': 'High', 'low': 'Low', 'open': 'Open', 'close': 'Close', 'volumeto': 'Volume'}, inplace=True)

# Tarih sütununu DateTime formatına çevir ve indeks olarak ayarla
df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')
df.set_index('Timestamp', inplace=True)

# DataFrame'i stock_data olarak kopyala
stock_data = df.copy()


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def find_support_resistance(data, window=10):
    minima_indices = argrelextrema(data['Low'].values, np.less_equal, order=window)[0]
    maxima_indices = argrelextrema(data['High'].values, np.greater_equal, order=window)[0]

    minima_indices = data.iloc[minima_indices].index
    maxima_indices = data.iloc[maxima_indices].index

    data['Support'] = np.nan
    data['Resistance'] = np.nan
    data.loc[minima_indices, 'Support'] = data.loc[minima_indices, 'Low']
    data.loc[maxima_indices, 'Resistance'] = data.loc[maxima_indices, 'High']
    return data

stock_data = find_support_resistance(stock_data)
# Destek ve Direnç Seviyelerine Göre Alım ve Satım Sinyalleri
stock_data['Buy_Signal_Support'] = (stock_data['Close'] < stock_data['Support']).shift(1).fillna(0).astype(int)
stock_data['Sell_Signal_Resistance'] = (stock_data['Close'] > stock_data['Resistance']).shift(1).fillna(0).astype(int)

#-------#-------#----BB---#-------#-------#-------#-------#-------#-------
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

# Assign the bands to the DataFrame
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Now you can use these columns as intended
# Bollinger Band Buy Signal (Price touches or crosses below lower band)
stock_data['Bollinger_Buy_Signal'] = stock_data['Close'] < stock_data['lower_band']

# Bollinger Band Sell Signal (Price touches or crosses above upper band)
stock_data['Bollinger_Sell_Signal'] = stock_data['Close'] > stock_data['upper_band']


#-------#-------#-----ROC--#-------#-------#-------#-------#-------#-------
stock_data['ROC'] = talib.ROC(stock_data['Close'], timeperiod=10)
stock_data['ROC_Buy_Signal'] = ((stock_data['ROC'].shift(1) < -5) & (stock_data['ROC'] > 0)).astype(int)
stock_data['ROC_Sell_Signal'] = ((stock_data['ROC'].shift(1) > 5) & (stock_data['ROC'] < 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['StochRSI'] = talib.STOCHRSI(stock_data['Close'], timeperiod=14, fastk_period=5, fastd_period=3, fastd_matype=0)[1]
stock_data['StochRSI_Buy_Signal'] = ((stock_data['StochRSI'] > 0.2) & (stock_data['StochRSI'].shift(1) < 0.2)).astype(int)
stock_data['StochRSI_Sell_Signal'] = ((stock_data['StochRSI'] < 0.8) & (stock_data['StochRSI'].shift(1) > 0.8)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def add_awesome_oscillator(data):
    median_price = (data['High'] + data['Low']) / 2
    short_period = 5
    long_period = 34
    short_ma = median_price.rolling(window=short_period).mean()
    long_ma = median_price.rolling(window=long_period).mean()
    data['AO'] = short_ma - long_ma
    return data

stock_data = add_awesome_oscillator(stock_data)
stock_data['AO_Buy_Signal'] = ((stock_data['AO'] > 0) & (stock_data['AO'].shift(1) < 0)).astype(int)
stock_data['AO_Sell_Signal'] = ((stock_data['AO'] < 0) & (stock_data['AO'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------

def ichimoku_cloud(df):
    nine_period_high = df['High'].rolling(window=9).max()
    nine_period_low = df['Low'].rolling(window=9).min()
    df['Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

    twenty_six_period_high = df['High'].rolling(window=26).max()
    twenty_six_period_low = df['Low'].rolling(window=26).min()
    df['Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

    return df
stock_data = ichimoku_cloud(stock_data)
stock_data['Ichimoku_Buy_Signal'] = ((stock_data['Close'] > stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] > stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)
stock_data['Ichimoku_Sell_Signal'] = ((stock_data['Close'] < stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] < stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg_Slope'] = talib.LINEARREG_SLOPE(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Linear_Reg_Slope'] > 0) & (stock_data['Linear_Reg_Slope'].shift(1) < 0)).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Linear_Reg_Slope'] < 0) & (stock_data['Linear_Reg_Slope'].shift(1) > 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

#-------#-------#-------#-------#-------#-------#-------#-------#-------

# Average True Range (ATR)
high_low = stock_data['High'] - stock_data['Low']
high_close = np.abs(stock_data['High'] - stock_data['Close'].shift())
low_close = np.abs(stock_data['Low'] - stock_data['Close'].shift())
ranges = pd.concat([high_low, high_close, low_close], axis=1)
true_range = np.max(ranges, axis=1)
stock_data['ATR'] = true_range.rolling(window=14).mean()
# ATR Değerindeki Değişimlere Göre Alım-Satım Sinyalleri
stock_data['ATR_Change'] = stock_data['ATR'].pct_change()
stock_data['ATR_Buy_Signal'] = (stock_data['ATR_Change'] > 0.1).astype(int)  # Örnek: ATR'de %10'luk bir artış
stock_data['ATR_Sell_Signal'] = (stock_data['ATR_Change'] < -0.1).astype(int)  # Örnek: ATR'de %10'luk bir düşüş

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Close'] > stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] > stock_data['Linear_Reg'].shift(1))).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Close'] < stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] < stock_data['Linear_Reg'].shift(1))).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['MACD'], stock_data['MACD_Signal'], _ = talib.MACD(stock_data['Close'], fastperiod=12, slowperiod=26, signalperiod=9)

# MACD Alım Sinyali (MACD, sinyal çizgisini yukarı yönde kesiyorsa)
stock_data['MACD_Buy_Signal'] = (stock_data['MACD'] > stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) <= stock_data['MACD_Signal'].shift(1))

# MACD Satım Sinyali (MACD, sinyal çizgisini aşağı yönde kesiyorsa)
stock_data['MACD_Sell_Signal'] = (stock_data['MACD'] < stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) >= stock_data['MACD_Signal'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# CCI (Commodity Channel Index)
TP = (stock_data['High'] + stock_data['Low'] + stock_data['Close']) / 3
cci = (TP - TP.rolling(window=20).mean()) / (0.015 * TP.rolling(window=20).std())
stock_data['CCI'] = cci


stock_data['CCI_Buy_Signal'] = ((stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) < -100)).astype(int)

stock_data['CCI_Sell_Signal'] = ((stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) > 100)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def elders_force_index(df, period=13):
    df['EFI'] = (df['Close'] - df['Close'].shift(1)) * df['Volume']
    df['EFI_Smoothed'] = df['EFI'].rolling(window=period).mean()
    return df

stock_data = elders_force_index(stock_data)
stock_data['EFI_Buy_Signal'] = ((stock_data['EFI_Smoothed'] > 0) & (stock_data['EFI_Smoothed'].shift(1) < 0)).astype(int)
stock_data['EFI_Sell_Signal'] = ((stock_data['EFI_Smoothed'] < 0) & (stock_data['EFI_Smoothed'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)

# RSI Alım Sinyali (RSI 30'dan düşükse)
stock_data['RSI_Buy_Signal'] = stock_data['RSI_14'] < 20

# RSI Satım Sinyali (RSI 70'den yüksekse)
stock_data['RSI_Sell_Signal'] = stock_data['RSI_14'] > 80
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)

# Stochastic Alım Sinyali (%K çizgisi %D çizgisini yukarı yönde kesiyorsa)
stock_data['Stoch_Buy_Signal'] = (stock_data['Stoch_K'] > stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) <= stock_data['Stoch_D'].shift(1))

# Stochastic Satım Sinyali (%K çizgisi %D çizgisini aşağı yönde kesiyorsa)
stock_data['Stoch_Sell_Signal'] = (stock_data['Stoch_K'] < stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) >= stock_data['Stoch_D'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# EMA 12 ve EMA 26'yı hesapla
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)

# EMA Alım Sinyali (EMA 12, EMA 26'yı yukarı yönde kesiyorsa)
stock_data['EMA1226_Buy_Signal'] = (stock_data['EMA_12'] > stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) <= stock_data['EMA_26'].shift(1))

# EMA Satım Sinyali (EMA 12, EMA 26'yı aşağı yönde kesiyorsa)
stock_data['EMA1226_Sell_Signal'] = (stock_data['EMA_12'] < stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) >= stock_data['EMA_26'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)

# SMA Alım Sinyali (Fiyat, SMA 50'yi yukarı yönde kesiyorsa)
stock_data['SMA_50_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_50']) & (stock_data['Close'].shift(1) <= stock_data['SMA_50'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 50'yi aşağı yönde kesiyorsa)
stock_data['SMA_50_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_50']) & (stock_data['Close'].shift(1) >= stock_data['SMA_50'].shift(1))

# SMA Alım Sinyali (Fiyat, SMA 200'ü yukarı yönde kesiyorsa)
stock_data['SMA_200_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_200']) & (stock_data['Close'].shift(1) <= stock_data['SMA_200'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 200'ü aşağı yönde kesiyorsa)
stock_data['SMA_200_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_200']) & (stock_data['Close'].shift(1) >= stock_data['SMA_200'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# Ichimoku Alım Sinyali (Fiyat, bulutun üstüne çıkıyorsa)
stock_data['Ichimoku_Buy_Signal'] = (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_B'])

# Ichimoku Satım Sinyali (Fiyat, bulutun altına düşüyorsa)
stock_data['Ichimoku_Sell_Signal'] = (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_B'])
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['ADX'] = talib.ADX(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX ve +DI/-DI göstergeleri için alım/satım sinyalleri
stock_data['Plus_DI'] = talib.PLUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)
stock_data['Minus_DI'] = talib.MINUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX Alım Sinyali (+DI, -DI'yi yukarı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Buy_Signal'] = ((stock_data['Plus_DI'] > stock_data['Minus_DI']) & (stock_data['Plus_DI'].shift(1) <= stock_data['Minus_DI'].shift(1)) & (stock_data['ADX'] > 25))

# ADX Satım Sinyali (-DI, +DI'yi aşağı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Sell_Signal'] = ((stock_data['Minus_DI'] > stock_data['Plus_DI']) & (stock_data['Minus_DI'].shift(1) <= stock_data['Plus_DI'].shift(1)) & (stock_data['ADX'] > 25))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Parabolic_SAR'] = talib.SAR(stock_data['High'], stock_data['Low'], acceleration=0.02, maximum=0.2)

# Parabolic SAR Alım Sinyali (Fiyat, Parabolic SAR'ın üstüne çıkıyorsa)
stock_data['Parabolic_SAR_Buy_Signal'] = stock_data['Close'] > stock_data['Parabolic_SAR']

# Parabolic SAR Satım Sinyali (Fiyat, Parabolic SAR'ın altına düşüyorsa)
stock_data['Parabolic_SAR_Sell_Signal'] = stock_data['Close'] < stock_data['Parabolic_SAR']
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['Williams_R'] = talib.WILLR(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# Williams %R Alım Sinyali (-80'den yukarı çıkıyorsa)
stock_data['Williams_R_Buy_Signal'] = (stock_data['Williams_R'] > -80) & (stock_data['Williams_R'].shift(1) <= -80)

# Williams %R Satım Sinyali (-20'den aşağı düşüyorsa)
stock_data['Williams_R_Sell_Signal'] = (stock_data['Williams_R'] < -20) & (stock_data['Williams_R'].shift(1) >= -20)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['CCI'] = talib.CCI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=20)

# CCI Alım Sinyali (-100'den yukarı çıkıyorsa)
stock_data['CCI_Buy_Signal'] = (stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) <= -100)

# CCI Satım Sinyali (+100'den aşağı düşüyorsa)
stock_data['CCI_Sell_Signal'] = (stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) >= 100)

# EMA 20 Hesaplama
stock_data['EMA_20'] = stock_data['Close'].ewm(span=20, adjust=False).mean()

# EMA 20'ye Göre Alım ve Satım Sinyalleri
# Fiyat EMA 20'nin üzerine çıktığında alım sinyali
stock_data['EMA_20_Buy_Signal'] = ((stock_data['Close'] > stock_data['EMA_20']) & (stock_data['Close'].shift(1) <= stock_data['EMA_20'].shift(1))).astype(int)

# Fiyat EMA 20'nin altına düştüğünde satım sinyali
stock_data['EMA_20_Sell_Signal'] = ((stock_data['Close'] < stock_data['EMA_20']) & (stock_data['Close'].shift(1) >= stock_data['EMA_20'].shift(1))).astype(int)

# Veri setinde NaN değerlerin olup olmadığını kontrol etme
nan_check = stock_data.isna().sum()
nan_check = nan_check[nan_check > 0]  # Sadece NaN değer içeren sütunları göster

nan_check

nan_check = stock_data.isna().sum()
print(nan_check[nan_check > 0])
# İleriye doldurma yöntemiyle NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)

# Hala NaN değerleri varsa, bu satırları kaldırma
stock_data.dropna(inplace=True)

# Kontrol için tekrar NaN değerleri kontrol etme
nan_check = stock_data.isna().sum()
"""print(nan_check[nan_check > 0])
print(stock_data.columns)"""

# Ethereum verilerini yükleyin (Örnek: 'eth_data' burada tanımlanmalıdır)
# eth_data = pd.read_csv('path_to_eth_data.csv')

sol_features = stock_data[['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12',
                           'EMA_26','EMA_20','EMA_50','EMA_100','EMA_20','EMA_100',
                           'Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B','SMA_9',
                           'SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                           'upper_band','lower_band']]

sol_scaler = MinMaxScaler(feature_range=(0, 1))
sol_scaled_features = sol_scaler.fit_transform(sol_features)

def sol_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 0])  # 'Close' price is used as the target variable
    return np.array(X), np.array(y)

sol_look_back = 36
sol_X, sol_y = sol_create_feature_dataset(sol_scaled_features, sol_look_back)

sol_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in sol_tscv.split(sol_X):
    sol_X_train, sol_X_test = sol_X[train_index], sol_X[test_index]
    sol_y_train, sol_y_test = sol_y[train_index], sol_y[test_index]

    sol_model = Sequential()
    sol_model.add(GRU(units=150, return_sequences=True, input_shape=(sol_X_train.shape[1], sol_X_train.shape[2])))
    sol_model.add(GRU(units=150, return_sequences=False))
    sol_model.add(Dense(units=1))

    sol_model.compile(optimizer='adam', loss='mean_squared_error')
    sol_model.fit(sol_X_train, sol_y_train, epochs=100, batch_size=32)

# Model performance measurement
sol_y_pred = sol_model.predict(sol_X_test)
sol_y_test_rescaled = sol_scaler.inverse_transform(np.concatenate((sol_y_test.reshape(-1,1), np.zeros(shape=(len(sol_y_test), sol_scaled_features.shape[1]-1))), axis=1))[:,0]
sol_y_pred_rescaled = sol_scaler.inverse_transform(np.concatenate((sol_y_pred, np.zeros(shape=(len(sol_y_pred), sol_scaled_features.shape[1]-1))), axis=1))[:,0]

sol_mse = mean_squared_error(sol_y_test_rescaled, sol_y_pred_rescaled)
sol_mae = mean_absolute_error(sol_y_test_rescaled, sol_y_pred_rescaled)
sol_r2 = r2_score(sol_y_test_rescaled, sol_y_pred_rescaled)

print(f'MSE: {sol_mse}')
print(f'MAE: {sol_mae}')
print(f'R2 Score: {sol_r2}')

# Plotting the results
plt.figure(figsize=(10,6))
plt.plot(sol_y_test_rescaled, color='blue', label='Actual Price')
plt.plot(sol_y_pred_rescaled, color='red', label='Predicted Price')
plt.title('Solana Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()


"""BNB"""
"""BNB"""
"""BNB"""
"""BNB"""

def fetch_data(api_key, fsym, tsym, limit, aggregate, toTs=None):
    url = "https://min-api.cryptocompare.com/data/v2/histohour"
    parameters = {
        "fsym": fsym,
        "tsym": tsym,
        "limit": limit,
        "aggregate": aggregate,
        "api_key": api_key
    }
    if toTs:
        parameters["toTs"] = toTs

    response = requests.get(url, params=parameters)
    return response.json()

api_key = "45e670f743b40ccd1e26b8ed2a2c330cc05b7c62bb3c27dd94f4102ca72cc75c"
fsym = "BNB"  # Kripto para birimi sembolü
tsym = "USD"  # Dönüşüm için para birimi sembolü
limit = 2000  # Maksimum veri noktası sayısı
aggregate = 4 # 4 saatlik veri aralıkları
number_of_additional_requests = 20 # Ek istek sayısı

data = fetch_data(api_key, fsym, tsym, limit, aggregate)
all_data = []

if "Data" in data and "Data" in data["Data"]:
    all_data.extend(data["Data"]["Data"])

    # İlk veri grubundan en erken zaman damgasını bul
    earliest_timestamp = all_data[0]['time']

    # Daha fazla veri çek
    for _ in range(number_of_additional_requests):
        data = fetch_data(api_key, fsym, tsym, limit, aggregate, earliest_timestamp)
        if "Data" in data and "Data" in data["Data"]:
            new_data = data["Data"]["Data"]
            if new_data:
                earliest_timestamp = new_data[0]['time']
                all_data.extend(new_data)
            else:
                break
        else:
            break

# Verileri zaman damgasına göre sırala
all_data.sort(key=lambda x: x['time'])

# Sıralanmış verileri yazdır
for item in all_data:
    timestamp = datetime.fromtimestamp(item['time']).strftime('%Y-%m-%d %H:%M:%S')
    high = item['high']
    low = item['low']
    open_price = item['open']  # 'open' değerini 'open_price' olarak değiştirin
    close = item['close']
    volume = item.get('volumeto', 'N/A')
    """print(f"Timestamp: {timestamp}, High: {high}, Low: {low}, Open: {open_price}, Close: {close}, Volume: {volume}")"""
df = pd.DataFrame(all_data)

# Sütunları yeniden adlandır
df.rename(columns={'time': 'Timestamp', 'high': 'High', 'low': 'Low', 'open': 'Open', 'close': 'Close', 'volumeto': 'Volume'}, inplace=True)

# Tarih sütununu DateTime formatına çevir ve indeks olarak ayarla
df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')
df.set_index('Timestamp', inplace=True)

# DataFrame'i stock_data olarak kopyala
stock_data = df.copy()


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def find_support_resistance(data, window=10):
    minima_indices = argrelextrema(data['Low'].values, np.less_equal, order=window)[0]
    maxima_indices = argrelextrema(data['High'].values, np.greater_equal, order=window)[0]

    minima_indices = data.iloc[minima_indices].index
    maxima_indices = data.iloc[maxima_indices].index

    data['Support'] = np.nan
    data['Resistance'] = np.nan
    data.loc[minima_indices, 'Support'] = data.loc[minima_indices, 'Low']
    data.loc[maxima_indices, 'Resistance'] = data.loc[maxima_indices, 'High']
    return data

stock_data = find_support_resistance(stock_data)
# Destek ve Direnç Seviyelerine Göre Alım ve Satım Sinyalleri
stock_data['Buy_Signal_Support'] = (stock_data['Close'] < stock_data['Support']).shift(1).fillna(0).astype(int)
stock_data['Sell_Signal_Resistance'] = (stock_data['Close'] > stock_data['Resistance']).shift(1).fillna(0).astype(int)

#-------#-------#----BB---#-------#-------#-------#-------#-------#-------
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

# Assign the bands to the DataFrame
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Now you can use these columns as intended
# Bollinger Band Buy Signal (Price touches or crosses below lower band)
stock_data['Bollinger_Buy_Signal'] = stock_data['Close'] < stock_data['lower_band']

# Bollinger Band Sell Signal (Price touches or crosses above upper band)
stock_data['Bollinger_Sell_Signal'] = stock_data['Close'] > stock_data['upper_band']


#-------#-------#-----ROC--#-------#-------#-------#-------#-------#-------
stock_data['ROC'] = talib.ROC(stock_data['Close'], timeperiod=10)
stock_data['ROC_Buy_Signal'] = ((stock_data['ROC'].shift(1) < -5) & (stock_data['ROC'] > 0)).astype(int)
stock_data['ROC_Sell_Signal'] = ((stock_data['ROC'].shift(1) > 5) & (stock_data['ROC'] < 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['StochRSI'] = talib.STOCHRSI(stock_data['Close'], timeperiod=14, fastk_period=5, fastd_period=3, fastd_matype=0)[1]
stock_data['StochRSI_Buy_Signal'] = ((stock_data['StochRSI'] > 0.2) & (stock_data['StochRSI'].shift(1) < 0.2)).astype(int)
stock_data['StochRSI_Sell_Signal'] = ((stock_data['StochRSI'] < 0.8) & (stock_data['StochRSI'].shift(1) > 0.8)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def add_awesome_oscillator(data):
    median_price = (data['High'] + data['Low']) / 2
    short_period = 5
    long_period = 34
    short_ma = median_price.rolling(window=short_period).mean()
    long_ma = median_price.rolling(window=long_period).mean()
    data['AO'] = short_ma - long_ma
    return data

stock_data = add_awesome_oscillator(stock_data)
stock_data['AO_Buy_Signal'] = ((stock_data['AO'] > 0) & (stock_data['AO'].shift(1) < 0)).astype(int)
stock_data['AO_Sell_Signal'] = ((stock_data['AO'] < 0) & (stock_data['AO'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------

def ichimoku_cloud(df):
    nine_period_high = df['High'].rolling(window=9).max()
    nine_period_low = df['Low'].rolling(window=9).min()
    df['Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

    twenty_six_period_high = df['High'].rolling(window=26).max()
    twenty_six_period_low = df['Low'].rolling(window=26).min()
    df['Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

    return df
stock_data = ichimoku_cloud(stock_data)
stock_data['Ichimoku_Buy_Signal'] = ((stock_data['Close'] > stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] > stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)
stock_data['Ichimoku_Sell_Signal'] = ((stock_data['Close'] < stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] < stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg_Slope'] = talib.LINEARREG_SLOPE(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Linear_Reg_Slope'] > 0) & (stock_data['Linear_Reg_Slope'].shift(1) < 0)).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Linear_Reg_Slope'] < 0) & (stock_data['Linear_Reg_Slope'].shift(1) > 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

#-------#-------#-------#-------#-------#-------#-------#-------#-------

# Average True Range (ATR)
high_low = stock_data['High'] - stock_data['Low']
high_close = np.abs(stock_data['High'] - stock_data['Close'].shift())
low_close = np.abs(stock_data['Low'] - stock_data['Close'].shift())
ranges = pd.concat([high_low, high_close, low_close], axis=1)
true_range = np.max(ranges, axis=1)
stock_data['ATR'] = true_range.rolling(window=14).mean()
# ATR Değerindeki Değişimlere Göre Alım-Satım Sinyalleri
stock_data['ATR_Change'] = stock_data['ATR'].pct_change()
stock_data['ATR_Buy_Signal'] = (stock_data['ATR_Change'] > 0.1).astype(int)  # Örnek: ATR'de %10'luk bir artış
stock_data['ATR_Sell_Signal'] = (stock_data['ATR_Change'] < -0.1).astype(int)  # Örnek: ATR'de %10'luk bir düşüş

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Close'] > stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] > stock_data['Linear_Reg'].shift(1))).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Close'] < stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] < stock_data['Linear_Reg'].shift(1))).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['MACD'], stock_data['MACD_Signal'], _ = talib.MACD(stock_data['Close'], fastperiod=12, slowperiod=26, signalperiod=9)

# MACD Alım Sinyali (MACD, sinyal çizgisini yukarı yönde kesiyorsa)
stock_data['MACD_Buy_Signal'] = (stock_data['MACD'] > stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) <= stock_data['MACD_Signal'].shift(1))

# MACD Satım Sinyali (MACD, sinyal çizgisini aşağı yönde kesiyorsa)
stock_data['MACD_Sell_Signal'] = (stock_data['MACD'] < stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) >= stock_data['MACD_Signal'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# CCI (Commodity Channel Index)
TP = (stock_data['High'] + stock_data['Low'] + stock_data['Close']) / 3
cci = (TP - TP.rolling(window=20).mean()) / (0.015 * TP.rolling(window=20).std())
stock_data['CCI'] = cci


stock_data['CCI_Buy_Signal'] = ((stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) < -100)).astype(int)

stock_data['CCI_Sell_Signal'] = ((stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) > 100)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def elders_force_index(df, period=13):
    df['EFI'] = (df['Close'] - df['Close'].shift(1)) * df['Volume']
    df['EFI_Smoothed'] = df['EFI'].rolling(window=period).mean()
    return df

stock_data = elders_force_index(stock_data)
stock_data['EFI_Buy_Signal'] = ((stock_data['EFI_Smoothed'] > 0) & (stock_data['EFI_Smoothed'].shift(1) < 0)).astype(int)
stock_data['EFI_Sell_Signal'] = ((stock_data['EFI_Smoothed'] < 0) & (stock_data['EFI_Smoothed'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)

# RSI Alım Sinyali (RSI 30'dan düşükse)
stock_data['RSI_Buy_Signal'] = stock_data['RSI_14'] < 20

# RSI Satım Sinyali (RSI 70'den yüksekse)
stock_data['RSI_Sell_Signal'] = stock_data['RSI_14'] > 80
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)

# Stochastic Alım Sinyali (%K çizgisi %D çizgisini yukarı yönde kesiyorsa)
stock_data['Stoch_Buy_Signal'] = (stock_data['Stoch_K'] > stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) <= stock_data['Stoch_D'].shift(1))

# Stochastic Satım Sinyali (%K çizgisi %D çizgisini aşağı yönde kesiyorsa)
stock_data['Stoch_Sell_Signal'] = (stock_data['Stoch_K'] < stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) >= stock_data['Stoch_D'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# EMA 12 ve EMA 26'yı hesapla
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)

# EMA Alım Sinyali (EMA 12, EMA 26'yı yukarı yönde kesiyorsa)
stock_data['EMA1226_Buy_Signal'] = (stock_data['EMA_12'] > stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) <= stock_data['EMA_26'].shift(1))

# EMA Satım Sinyali (EMA 12, EMA 26'yı aşağı yönde kesiyorsa)
stock_data['EMA1226_Sell_Signal'] = (stock_data['EMA_12'] < stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) >= stock_data['EMA_26'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)

# SMA Alım Sinyali (Fiyat, SMA 50'yi yukarı yönde kesiyorsa)
stock_data['SMA_50_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_50']) & (stock_data['Close'].shift(1) <= stock_data['SMA_50'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 50'yi aşağı yönde kesiyorsa)
stock_data['SMA_50_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_50']) & (stock_data['Close'].shift(1) >= stock_data['SMA_50'].shift(1))

# SMA Alım Sinyali (Fiyat, SMA 200'ü yukarı yönde kesiyorsa)
stock_data['SMA_200_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_200']) & (stock_data['Close'].shift(1) <= stock_data['SMA_200'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 200'ü aşağı yönde kesiyorsa)
stock_data['SMA_200_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_200']) & (stock_data['Close'].shift(1) >= stock_data['SMA_200'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# Ichimoku Alım Sinyali (Fiyat, bulutun üstüne çıkıyorsa)
stock_data['Ichimoku_Buy_Signal'] = (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_B'])

# Ichimoku Satım Sinyali (Fiyat, bulutun altına düşüyorsa)
stock_data['Ichimoku_Sell_Signal'] = (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_B'])
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['ADX'] = talib.ADX(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX ve +DI/-DI göstergeleri için alım/satım sinyalleri
stock_data['Plus_DI'] = talib.PLUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)
stock_data['Minus_DI'] = talib.MINUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX Alım Sinyali (+DI, -DI'yi yukarı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Buy_Signal'] = ((stock_data['Plus_DI'] > stock_data['Minus_DI']) & (stock_data['Plus_DI'].shift(1) <= stock_data['Minus_DI'].shift(1)) & (stock_data['ADX'] > 25))

# ADX Satım Sinyali (-DI, +DI'yi aşağı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Sell_Signal'] = ((stock_data['Minus_DI'] > stock_data['Plus_DI']) & (stock_data['Minus_DI'].shift(1) <= stock_data['Plus_DI'].shift(1)) & (stock_data['ADX'] > 25))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Parabolic_SAR'] = talib.SAR(stock_data['High'], stock_data['Low'], acceleration=0.02, maximum=0.2)

# Parabolic SAR Alım Sinyali (Fiyat, Parabolic SAR'ın üstüne çıkıyorsa)
stock_data['Parabolic_SAR_Buy_Signal'] = stock_data['Close'] > stock_data['Parabolic_SAR']

# Parabolic SAR Satım Sinyali (Fiyat, Parabolic SAR'ın altına düşüyorsa)
stock_data['Parabolic_SAR_Sell_Signal'] = stock_data['Close'] < stock_data['Parabolic_SAR']
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['Williams_R'] = talib.WILLR(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# Williams %R Alım Sinyali (-80'den yukarı çıkıyorsa)
stock_data['Williams_R_Buy_Signal'] = (stock_data['Williams_R'] > -80) & (stock_data['Williams_R'].shift(1) <= -80)

# Williams %R Satım Sinyali (-20'den aşağı düşüyorsa)
stock_data['Williams_R_Sell_Signal'] = (stock_data['Williams_R'] < -20) & (stock_data['Williams_R'].shift(1) >= -20)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['CCI'] = talib.CCI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=20)

# CCI Alım Sinyali (-100'den yukarı çıkıyorsa)
stock_data['CCI_Buy_Signal'] = (stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) <= -100)

# CCI Satım Sinyali (+100'den aşağı düşüyorsa)
stock_data['CCI_Sell_Signal'] = (stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) >= 100)

# EMA 20 Hesaplama
stock_data['EMA_20'] = stock_data['Close'].ewm(span=20, adjust=False).mean()

# EMA 20'ye Göre Alım ve Satım Sinyalleri
# Fiyat EMA 20'nin üzerine çıktığında alım sinyali
stock_data['EMA_20_Buy_Signal'] = ((stock_data['Close'] > stock_data['EMA_20']) & (stock_data['Close'].shift(1) <= stock_data['EMA_20'].shift(1))).astype(int)

# Fiyat EMA 20'nin altına düştüğünde satım sinyali
stock_data['EMA_20_Sell_Signal'] = ((stock_data['Close'] < stock_data['EMA_20']) & (stock_data['Close'].shift(1) >= stock_data['EMA_20'].shift(1))).astype(int)

# Veri setinde NaN değerlerin olup olmadığını kontrol etme
nan_check = stock_data.isna().sum()
nan_check = nan_check[nan_check > 0]  # Sadece NaN değer içeren sütunları göster

nan_check

nan_check = stock_data.isna().sum()
print(nan_check[nan_check > 0])
# İleriye doldurma yöntemiyle NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)

# Hala NaN değerleri varsa, bu satırları kaldırma
stock_data.dropna(inplace=True)

# Kontrol için tekrar NaN değerleri kontrol etme
nan_check = stock_data.isna().sum()
"""print(nan_check[nan_check > 0])
print(stock_data.columns)"""

bnb_features = stock_data[['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12',
                           'EMA_26','EMA_20','EMA_50','EMA_100','EMA_20','EMA_100',
                           'Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B','SMA_9',
                           'SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                           'upper_band','lower_band']]

bnb_scaler = MinMaxScaler(feature_range=(0, 1))
bnb_scaled_features = bnb_scaler.fit_transform(bnb_features)

def bnb_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 0])  # 'Close' price is used as the target variable
    return np.array(X), np.array(y)

bnb_look_back = 36
bnb_X, bnb_y = bnb_create_feature_dataset(bnb_scaled_features, bnb_look_back)

bnb_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in bnb_tscv.split(bnb_X):
    bnb_X_train, bnb_X_test = bnb_X[train_index], bnb_X[test_index]
    bnb_y_train, bnb_y_test = bnb_y[train_index], bnb_y[test_index]

    bnb_model = Sequential()
    bnb_model.add(GRU(units=150, return_sequences=True, input_shape=(bnb_X_train.shape[1], bnb_X_train.shape[2])))
    bnb_model.add(GRU(units=150, return_sequences=False))
    bnb_model.add(Dense(units=1))

    bnb_model.compile(optimizer='adam', loss='mean_squared_error')
    bnb_model.fit(bnb_X_train, bnb_y_train, epochs=100, batch_size=32)

# Model performance measurement
bnb_y_pred = bnb_model.predict(bnb_X_test)
bnb_y_test_rescaled = bnb_scaler.inverse_transform(np.concatenate((bnb_y_test.reshape(-1,1), np.zeros(shape=(len(bnb_y_test), bnb_scaled_features.shape[1]-1))), axis=1))[:,0]
bnb_y_pred_rescaled = bnb_scaler.inverse_transform(np.concatenate((bnb_y_pred, np.zeros(shape=(len(bnb_y_pred), bnb_scaled_features.shape[1]-1))), axis=1))[:,0]

bnb_mse = mean_squared_error(bnb_y_test_rescaled, bnb_y_pred_rescaled)
bnb_mae = mean_absolute_error(bnb_y_test_rescaled, bnb_y_pred_rescaled)
bnb_r2 = r2_score(bnb_y_test_rescaled, bnb_y_pred_rescaled)

print(f'MSE: {bnb_mse}')
print(f'MAE: {bnb_mae}')
print(f'R2 Score: {bnb_r2}')

# Plotting the results
plt.figure(figsize=(10,6))
plt.plot(bnb_y_test_rescaled, color='blue', label='Actual Price')
plt.plot(bnb_y_pred_rescaled, color='red', label='Predicted Price')
plt.title('BNB Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

"""TSLA"""
"""TSLA"""
"""TSLA"""
"""TSLA"""

# Fetch TSLA stock data from Yahoo Finance
stock_data = yf.download('TSLA', start='2020-01-01', end='2024-06-12', interval='1d')
# Verilerin NaN olup olmadığını kontrol et ve doldur
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Teknik göstergelerin hesaplanması
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowd_period=3)
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Verileri içeren sütunları doğrulama ve sadece mevcut sütunları seçme
feature_columns = ['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12','EMA_26',
                   'EMA_20','EMA_50','EMA_100','Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B',
                   'SMA_9','SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                   'upper_band','lower_band']

existing_columns = [col for col in feature_columns if col in stock_data.columns]
print(f"Mevcut sütunlar: {existing_columns}")

tsla_features = stock_data[existing_columns]

# Özelliklerin ölçeklendirilmesi
tsla_scaler = MinMaxScaler(feature_range=(0, 1))
tsla_scaled_features = tsla_scaler.fit_transform(tsla_features)

def tsla_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 3])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

tsla_look_back = 36
tsla_X, tsla_y = tsla_create_feature_dataset(tsla_scaled_features, tsla_look_back)

tsla_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tsla_tscv.split(tsla_X):
    tsla_X_train, tsla_X_test = tsla_X[train_index], tsla_X[test_index]
    tsla_y_train, tsla_y_test = tsla_y[train_index], tsla_y[test_index]

    tsla_model = Sequential()
    tsla_model.add(GRU(units=150, return_sequences=True, input_shape=(tsla_X_train.shape[1], tsla_X_train.shape[2])))
    tsla_model.add(GRU(units=150, return_sequences=False))
    tsla_model.add(Dense(units=1))

    tsla_model.compile(optimizer='adam', loss='mean_squared_error')
    tsla_model.fit(tsla_X_train, tsla_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
tsla_y_pred = tsla_model.predict(tsla_X_test)

# 'Close' fiyatını yeniden ölçeklendirme
tsla_y_test_rescaled = tsla_y_test * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()
tsla_y_pred_rescaled = tsla_y_pred * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

tsla_y_test_rescaled = tsla_y_test_rescaled.flatten()  # Dizi boyutunu düzeltme
tsla_y_pred_rescaled = tsla_y_pred_rescaled.flatten()  # Dizi boyutunu düzeltme

tsla_mse = mean_squared_error(tsla_y_test_rescaled, tsla_y_pred_rescaled)
tsla_mae = mean_absolute_error(tsla_y_test_rescaled, tsla_y_pred_rescaled)
tsla_r2 = r2_score(tsla_y_test_rescaled, tsla_y_pred_rescaled)

print(f'MSE: {tsla_mse}')
print(f'MAE: {tsla_mae}')
print(f'R2 Skoru: {tsla_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(tsla_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(tsla_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('TSLA Close Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Tahminleri ve gerçek fiyatları yazdırma
test_dates = stock_data.index[-len(tsla_y_test):]  # Son 'len(tsla_y_test)' tarihi al
for i in range(len(tsla_y_test_rescaled)):
    print(f"Tarih: {test_dates[i].date()}, Gerçek Fiyat: {tsla_y_test_rescaled[i]:.2f}, Tahmin Edilen Fiyat: {tsla_y_pred_rescaled[i]:.2f}")

# Tahmin edilen zaman damgasını hesaplama
tsla_last_sequence = tsla_scaled_features[-tsla_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
tsla_last_sequence = np.expand_dims(tsla_last_sequence, axis=0)  # Modelin beklediği shape'e getir
tsla_next_prediction = tsla_model.predict(tsla_last_sequence)

# Tahminin ölçeklendirmesini geri alma
tsla_next_prediction_rescaled = tsla_next_prediction.flatten() * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

next_timestamp = stock_data.index[-1] + timedelta(days=1)
print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat TSLA: {tsla_next_prediction_rescaled[0]:.2f}")

"""AAPL"""
"""AAPL"""
"""AAPL"""
"""AAPL"""


# Fetch TSLA stock data from Yahoo Finance
stock_data = yf.download('AAPL', start='2020-01-01', end='2024-06-12', interval='1d')

# Verilerin NaN olup olmadığını kontrol et ve doldur
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Teknik göstergelerin hesaplanması
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowd_period=3)
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Verileri içeren sütunları doğrulama ve sadece mevcut sütunları seçme
feature_columns = ['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12','EMA_26',
                   'EMA_20','EMA_50','EMA_100','Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B',
                   'SMA_9','SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                   'upper_band','lower_band']

existing_columns = [col for col in feature_columns if col in stock_data.columns]
print(f"Mevcut sütunlar: {existing_columns}")

aapl_features = stock_data[existing_columns]

# Özelliklerin ölçeklendirilmesi
aapl_scaler = MinMaxScaler(feature_range=(0, 1))
aapl_scaled_features = aapl_scaler.fit_transform(aapl_features)

def aapl_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 3])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

aapl_look_back = 36
aapl_X, aapl_y = aapl_create_feature_dataset(aapl_scaled_features, aapl_look_back)

aapl_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in aapl_tscv.split(aapl_X):
    aapl_X_train, aapl_X_test = aapl_X[train_index], aapl_X[test_index]
    aapl_y_train, aapl_y_test = aapl_y[train_index], aapl_y[test_index]

    aapl_model = Sequential()
    aapl_model.add(GRU(units=150, return_sequences=True, input_shape=(aapl_X_train.shape[1], aapl_X_train.shape[2])))
    aapl_model.add(GRU(units=150, return_sequences=False))
    aapl_model.add(Dense(units=1))

    aapl_model.compile(optimizer='adam', loss='mean_squared_error')
    aapl_model.fit(aapl_X_train, aapl_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
aapl_y_pred = aapl_model.predict(aapl_X_test)

# 'Close' fiyatını yeniden ölçeklendirme
aapl_y_test_rescaled = aapl_y_test * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()
aapl_y_pred_rescaled = aapl_y_pred * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

aapl_y_test_rescaled = aapl_y_test_rescaled.flatten()  # Dizi boyutunu düzeltme
aapl_y_pred_rescaled = aapl_y_pred_rescaled.flatten()  # Dizi boyutunu düzeltme

aapl_mse = mean_squared_error(aapl_y_test_rescaled, aapl_y_pred_rescaled)
aapl_mae = mean_absolute_error(aapl_y_test_rescaled, aapl_y_pred_rescaled)
aapl_r2 = r2_score(aapl_y_test_rescaled, aapl_y_pred_rescaled)

print(f'MSE: {aapl_mse}')
print(f'MAE: {aapl_mae}')
print(f'R2 Skoru: {aapl_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(aapl_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(aapl_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('AAPL Close Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Tahminleri ve gerçek fiyatları yazdırma
test_dates = stock_data.index[-len(aapl_y_test):]  # Son 'len(aapl_y_test)' tarihi al
for i in range(len(aapl_y_test_rescaled)):
    print(f"Tarih: {test_dates[i].date()}, Gerçek Fiyat: {aapl_y_test_rescaled[i]:.2f}, Tahmin Edilen Fiyat: {aapl_y_pred_rescaled[i]:.2f}")

# Tahmin edilen zaman damgasını hesaplama
aapl_last_sequence = aapl_scaled_features[-aapl_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
aapl_last_sequence = np.expand_dims(aapl_last_sequence, axis=0)  # Modelin beklediği shape'e getir
aapl_next_prediction = aapl_model.predict(aapl_last_sequence)

# Tahminin ölçeklendirmesini geri alma
aapl_next_prediction_rescaled = aapl_next_prediction.flatten() * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

next_timestamp = stock_data.index[-1] + timedelta(days=1)
print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat AAPL: {aapl_next_prediction_rescaled[0]:.2f}")



"""AMZN"""
"""AMZN"""
"""AMZN"""
"""AMZN"""

# Fetch AMZN stock data from Yahoo Finance
stock_data = yf.download('AMZN', start='2020-01-01', end='2024-06-12', interval='1d')

# Verilerin NaN olup olmadığını kontrol et ve doldur
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Teknik göstergelerin hesaplanması
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowd_period=3)
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Verileri içeren sütunları doğrulama ve sadece mevcut sütunları seçme
feature_columns = ['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12','EMA_26',
                   'EMA_20','EMA_50','EMA_100','Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B',
                   'SMA_9','SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                   'upper_band','lower_band']

existing_columns = [col for col in feature_columns if col in stock_data.columns]
print(f"Mevcut sütunlar: {existing_columns}")

amzn_features = stock_data[existing_columns]

# Özelliklerin ölçeklendirilmesi
amzn_scaler = MinMaxScaler(feature_range=(0, 1))
amzn_scaled_features = amzn_scaler.fit_transform(amzn_features)

def amzn_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 3])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

amzn_look_back = 36
amzn_X, amzn_y = amzn_create_feature_dataset(amzn_scaled_features, amzn_look_back)

amzn_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in amzn_tscv.split(amzn_X):
    amzn_X_train, amzn_X_test = amzn_X[train_index], amzn_X[test_index]
    amzn_y_train, amzn_y_test = amzn_y[train_index], amzn_y[test_index]

    amzn_model = Sequential()
    amzn_model.add(GRU(units=150, return_sequences=True, input_shape=(amzn_X_train.shape[1], amzn_X_train.shape[2])))
    amzn_model.add(GRU(units=150, return_sequences=False))
    amzn_model.add(Dense(units=1))

    amzn_model.compile(optimizer='adam', loss='mean_squared_error')
    amzn_model.fit(amzn_X_train, amzn_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
amzn_y_pred = amzn_model.predict(amzn_X_test)

# 'Close' fiyatını yeniden ölçeklendirme
amzn_y_test_rescaled = amzn_y_test * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()
amzn_y_pred_rescaled = amzn_y_pred * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

amzn_y_test_rescaled = amzn_y_test_rescaled.flatten()  # Dizi boyutunu düzeltme
amzn_y_pred_rescaled = amzn_y_pred_rescaled.flatten()  # Dizi boyutunu düzeltme

amzn_mse = mean_squared_error(amzn_y_test_rescaled, amzn_y_pred_rescaled)
amzn_mae = mean_absolute_error(amzn_y_test_rescaled, amzn_y_pred_rescaled)
amzn_r2 = r2_score(amzn_y_test_rescaled, amzn_y_pred_rescaled)

print(f'MSE: {amzn_mse}')
print(f'MAE: {amzn_mae}')
print(f'R2 Skoru: {amzn_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(amzn_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(amzn_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('AMZN Close Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Tahminleri ve gerçek fiyatları yazdırma
test_dates = stock_data.index[-len(amzn_y_test):]  # Son 'len(amzn_y_test)' tarihi al
for i in range(len(amzn_y_test_rescaled)):
    print(f"Tarih: {test_dates[i].date()}, Gerçek Fiyat: {amzn_y_test_rescaled[i]:.2f}, Tahmin Edilen Fiyat: {amzn_y_pred_rescaled[i]:.2f}")

# Tahmin edilen zaman damgasını hesaplama
amzn_last_sequence = amzn_scaled_features[-amzn_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
amzn_last_sequence = np.expand_dims(amzn_last_sequence, axis=0)  # Modelin beklediği shape'e getir
amzn_next_prediction = amzn_model.predict(amzn_last_sequence)

# Tahminin ölçeklendirmesini geri alma
amzn_next_prediction_rescaled = amzn_next_prediction.flatten() * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

next_timestamp = stock_data.index[-1] + timedelta(days=1)
print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat AMZN: {amzn_next_prediction_rescaled[0]:.2f}")



"""MSFT"""
"""MSFT"""
"""MSFT"""
"""MSFT"""
# Fetch MSFT stock data from Yahoo Finance
stock_data = yf.download('MSFT', start='2020-01-01', end='2024-06-12', interval='1d')

# Verilerin NaN olup olmadığını kontrol et ve doldur
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Teknik göstergelerin hesaplanması
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowd_period=3)
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Verileri içeren sütunları doğrulama ve sadece mevcut sütunları seçme
feature_columns = ['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12','EMA_26',
                   'EMA_20','EMA_50','EMA_100','Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B',
                   'SMA_9','SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                   'upper_band','lower_band']

existing_columns = [col for col in feature_columns if col in stock_data.columns]
print(f"Mevcut sütunlar: {existing_columns}")

msft_features = stock_data[existing_columns]

# Özelliklerin ölçeklendirilmesi
msft_scaler = MinMaxScaler(feature_range=(0, 1))
msft_scaled_features = msft_scaler.fit_transform(msft_features)

def msft_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 3])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

msft_look_back = 36
msft_X, msft_y = msft_create_feature_dataset(msft_scaled_features, msft_look_back)

msft_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in msft_tscv.split(msft_X):
    msft_X_train, msft_X_test = msft_X[train_index], msft_X[test_index]
    msft_y_train, msft_y_test = msft_y[train_index], msft_y[test_index]

    msft_model = Sequential()
    msft_model.add(GRU(units=150, return_sequences=True, input_shape=(msft_X_train.shape[1], msft_X_train.shape[2])))
    msft_model.add(GRU(units=150, return_sequences=False))
    msft_model.add(Dense(units=1))

    msft_model.compile(optimizer='adam', loss='mean_squared_error')
    msft_model.fit(msft_X_train, msft_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
msft_y_pred = msft_model.predict(msft_X_test)

# 'Close' fiyatını yeniden ölçeklendirme
msft_y_test_rescaled = msft_y_test * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()
msft_y_pred_rescaled = msft_y_pred * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

msft_y_test_rescaled = msft_y_test_rescaled.flatten()  # Dizi boyutunu düzeltme
msft_y_pred_rescaled = msft_y_pred_rescaled.flatten()  # Dizi boyutunu düzeltme

msft_mse = mean_squared_error(msft_y_test_rescaled, msft_y_pred_rescaled)
msft_mae = mean_absolute_error(msft_y_test_rescaled, msft_y_pred_rescaled)
msft_r2 = r2_score(msft_y_test_rescaled, msft_y_pred_rescaled)

print(f'MSE: {msft_mse}')
print(f'MAE: {msft_mae}')
print(f'R2 Skoru: {msft_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(msft_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(msft_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('MSFT Close Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Tahminleri ve gerçek fiyatları yazdırma
test_dates = stock_data.index[-len(msft_y_test):]  # Son 'len(msft_y_test)' tarihi al
for i in range(len(msft_y_test_rescaled)):
    print(f"Tarih: {test_dates[i].date()}, Gerçek Fiyat: {msft_y_test_rescaled[i]:.2f}, Tahmin Edilen Fiyat: {msft_y_pred_rescaled[i]:.2f}")

# Tahmin edilen zaman damgasını hesaplama
msft_last_sequence = msft_scaled_features[-msft_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
msft_last_sequence = np.expand_dims(msft_last_sequence, axis=0)  # Modelin beklediği shape'e getir
msft_next_prediction = msft_model.predict(msft_last_sequence)

# Tahminin ölçeklendirmesini geri alma
msft_next_prediction_rescaled = msft_next_prediction.flatten() * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

next_timestamp = stock_data.index[-1] + timedelta(days=1)
print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat MSFT: {msft_next_prediction_rescaled[0]:.2f}")



"""GOOGL"""
"""GOOGL"""
"""GOOGL"""
"""GOOGL"""

# Fetch GOOGL stock data from Yahoo Finance
stock_data = yf.download('GOOGL', start='2020-01-01', end='2024-06-12', interval='1d')

# Verilerin NaN olup olmadığını kontrol et ve doldur
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Teknik göstergelerin hesaplanması
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowd_period=3)
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)
stock_data.dropna(inplace=True)

# Verileri içeren sütunları doğrulama ve sadece mevcut sütunları seçme
feature_columns = ['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12','EMA_26',
                   'EMA_20','EMA_50','EMA_100','Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B',
                   'SMA_9','SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                   'upper_band','lower_band']

existing_columns = [col for col in feature_columns if col in stock_data.columns]
print(f"Mevcut sütunlar: {existing_columns}")

googl_features = stock_data[existing_columns]

# Özelliklerin ölçeklendirilmesi
googl_scaler = MinMaxScaler(feature_range=(0, 1))
googl_scaled_features = googl_scaler.fit_transform(googl_features)

def googl_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 3])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

googl_look_back = 36
googl_X, googl_y = googl_create_feature_dataset(googl_scaled_features, googl_look_back)

googl_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in googl_tscv.split(googl_X):
    googl_X_train, googl_X_test = googl_X[train_index], googl_X[test_index]
    googl_y_train, googl_y_test = googl_y[train_index], googl_y[test_index]

    googl_model = Sequential()
    googl_model.add(GRU(units=150, return_sequences=True, input_shape=(googl_X_train.shape[1], googl_X_train.shape[2])))
    googl_model.add(GRU(units=150, return_sequences=False))
    googl_model.add(Dense(units=1))

    googl_model.compile(optimizer='adam', loss='mean_squared_error')
    googl_model.fit(googl_X_train, googl_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
googl_y_pred = googl_model.predict(googl_X_test)

# 'Close' fiyatını yeniden ölçeklendirme
googl_y_test_rescaled = googl_y_test * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()
googl_y_pred_rescaled = googl_y_pred * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

googl_y_test_rescaled = googl_y_test_rescaled.flatten()  # Dizi boyutunu düzeltme
googl_y_pred_rescaled = googl_y_pred_rescaled.flatten()  # Dizi boyutunu düzeltme

googl_mse = mean_squared_error(googl_y_test_rescaled, googl_y_pred_rescaled)
googl_mae = mean_absolute_error(googl_y_test_rescaled, googl_y_pred_rescaled)
googl_r2 = r2_score(googl_y_test_rescaled, googl_y_pred_rescaled)

print(f'MSE: {googl_mse}')
print(f'MAE: {googl_mae}')
print(f'R2 Skoru: {googl_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(googl_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(googl_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('GOOGL Close Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Tahminleri ve gerçek fiyatları yazdırma
test_dates = stock_data.index[-len(googl_y_test):]  # Son 'len(googl_y_test)' tarihi al
for i in range(len(googl_y_test_rescaled)):
    print(f"Tarih: {test_dates[i].date()}, Gerçek Fiyat: {googl_y_test_rescaled[i]:.2f}, Tahmin Edilen Fiyat: {googl_y_pred_rescaled[i]:.2f}")

# Tahmin edilen zaman damgasını hesaplama
googl_last_sequence = googl_scaled_features[-googl_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
googl_last_sequence = np.expand_dims(googl_last_sequence, axis=0)  # Modelin beklediği shape'e getir
googl_next_prediction = googl_model.predict(googl_last_sequence)

# Tahminin ölçeklendirmesini geri alma
googl_next_prediction_rescaled = googl_next_prediction.flatten() * (stock_data['Close'].max() - stock_data['Close'].min()) + stock_data['Close'].min()

next_timestamp = stock_data.index[-1] + timedelta(days=1)
print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat GOOGL: {googl_next_prediction_rescaled[0]:.2f}")


"""BİTCOİN"""
"""BİTCOİN"""
"""BİTCOİN"""
"""BİTCOİN"""

def fetch_data(api_key, fsym, tsym, limit, aggregate, toTs=None):
    url = "https://min-api.cryptocompare.com/data/v2/histohour"
    parameters = {
        "fsym": fsym,
        "tsym": tsym,
        "limit": limit,
        "aggregate": aggregate,
        "api_key": api_key
    }
    if toTs:
        parameters["toTs"] = toTs

    response = requests.get(url, params=parameters)
    return response.json()

api_key = "45e670f743b40ccd1e26b8ed2a2c330cc05b7c62bb3c27dd94f4102ca72cc75c"
fsym = "BTC"  # Kripto para birimi sembolü
tsym = "USD"  # Dönüşüm için para birimi sembolü
limit = 2000  # Maksimum veri noktası sayısı
aggregate = 4 # 4 saatlik veri aralıkları
number_of_additional_requests = 20 # Ek istek sayısı

data = fetch_data(api_key, fsym, tsym, limit, aggregate)
all_data = []

if "Data" in data and "Data" in data["Data"]:
    all_data.extend(data["Data"]["Data"])

    # İlk veri grubundan en erken zaman damgasını bul
    earliest_timestamp = all_data[0]['time']

    # Daha fazla veri çek
    for _ in range(number_of_additional_requests):
        data = fetch_data(api_key, fsym, tsym, limit, aggregate, earliest_timestamp)
        if "Data" in data and "Data" in data["Data"]:
            new_data = data["Data"]["Data"]
            if new_data:
                earliest_timestamp = new_data[0]['time']
                all_data.extend(new_data)
            else:
                break
        else:
            break

# Verileri zaman damgasına göre sırala
all_data.sort(key=lambda x: x['time'])

# Sıralanmış verileri yazdır
for item in all_data:
    timestamp = datetime.fromtimestamp(item['time']).strftime('%Y-%m-%d %H:%M:%S')
    high = item['high']
    low = item['low']
    open_price = item['open']  # 'open' değerini 'open_price' olarak değiştirin
    close = item['close']
    volume = item.get('volumeto', 'N/A')
    """print(f"Timestamp: {timestamp}, High: {high}, Low: {low}, Open: {open_price}, Close: {close}, Volume: {volume}")"""
df = pd.DataFrame(all_data)

# Sütunları yeniden adlandır
df.rename(columns={'time': 'Timestamp', 'high': 'High', 'low': 'Low', 'open': 'Open', 'close': 'Close', 'volumeto': 'Volume'}, inplace=True)

# Tarih sütununu DateTime formatına çevir ve indeks olarak ayarla
df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s')
df.set_index('Timestamp', inplace=True)

# DataFrame'i stock_data olarak kopyala
stock_data = df.copy()
#-------#-------#-------#-------#-------#-------#-------#-------#-------
def find_support_resistance(data, window=10):
    minima_indices = argrelextrema(data['Low'].values, np.less_equal, order=window)[0]
    maxima_indices = argrelextrema(data['High'].values, np.greater_equal, order=window)[0]

    minima_indices = data.iloc[minima_indices].index
    maxima_indices = data.iloc[maxima_indices].index

    data['Support'] = np.nan
    data['Resistance'] = np.nan
    data.loc[minima_indices, 'Support'] = data.loc[minima_indices, 'Low']
    data.loc[maxima_indices, 'Resistance'] = data.loc[maxima_indices, 'High']
    return data

stock_data = find_support_resistance(stock_data)
# Destek ve Direnç Seviyelerine Göre Alım ve Satım Sinyalleri
stock_data['Buy_Signal_Support'] = (stock_data['Close'] < stock_data['Support']).shift(1).fillna(0).astype(int)
stock_data['Sell_Signal_Resistance'] = (stock_data['Close'] > stock_data['Resistance']).shift(1).fillna(0).astype(int)

#-------#-------#----BB---#-------#-------#-------#-------#-------#-------
upper_band, middle_band, lower_band = talib.BBANDS(stock_data['Close'], timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

# Assign the bands to the DataFrame
stock_data['upper_band'] = upper_band
stock_data['middle_band'] = middle_band
stock_data['lower_band'] = lower_band

# Now you can use these columns as intended
# Bollinger Band Buy Signal (Price touches or crosses below lower band)
stock_data['Bollinger_Buy_Signal'] = stock_data['Close'] < stock_data['lower_band']

# Bollinger Band Sell Signal (Price touches or crosses above upper band)
stock_data['Bollinger_Sell_Signal'] = stock_data['Close'] > stock_data['upper_band']


#-------#-------#-----ROC--#-------#-------#-------#-------#-------#-------
stock_data['ROC'] = talib.ROC(stock_data['Close'], timeperiod=10)
stock_data['ROC_Buy_Signal'] = ((stock_data['ROC'].shift(1) < -5) & (stock_data['ROC'] > 0)).astype(int)
stock_data['ROC_Sell_Signal'] = ((stock_data['ROC'].shift(1) > 5) & (stock_data['ROC'] < 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['StochRSI'] = talib.STOCHRSI(stock_data['Close'], timeperiod=14, fastk_period=5, fastd_period=3, fastd_matype=0)[1]
stock_data['StochRSI_Buy_Signal'] = ((stock_data['StochRSI'] > 0.2) & (stock_data['StochRSI'].shift(1) < 0.2)).astype(int)
stock_data['StochRSI_Sell_Signal'] = ((stock_data['StochRSI'] < 0.8) & (stock_data['StochRSI'].shift(1) > 0.8)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def add_awesome_oscillator(data):
    median_price = (data['High'] + data['Low']) / 2
    short_period = 5
    long_period = 34
    short_ma = median_price.rolling(window=short_period).mean()
    long_ma = median_price.rolling(window=long_period).mean()
    data['AO'] = short_ma - long_ma
    return data

stock_data = add_awesome_oscillator(stock_data)
stock_data['AO_Buy_Signal'] = ((stock_data['AO'] > 0) & (stock_data['AO'].shift(1) < 0)).astype(int)
stock_data['AO_Sell_Signal'] = ((stock_data['AO'] < 0) & (stock_data['AO'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------

def ichimoku_cloud(df):
    nine_period_high = df['High'].rolling(window=9).max()
    nine_period_low = df['Low'].rolling(window=9).min()
    df['Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

    twenty_six_period_high = df['High'].rolling(window=26).max()
    twenty_six_period_low = df['Low'].rolling(window=26).min()
    df['Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

    return df
stock_data = ichimoku_cloud(stock_data)
stock_data['Ichimoku_Buy_Signal'] = ((stock_data['Close'] > stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] > stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)
stock_data['Ichimoku_Sell_Signal'] = ((stock_data['Close'] < stock_data['Senkou_Span_A']) & (stock_data['Senkou_Span_A'] < stock_data['Senkou_Span_B'])).shift(26).fillna(0).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg_Slope'] = talib.LINEARREG_SLOPE(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Linear_Reg_Slope'] > 0) & (stock_data['Linear_Reg_Slope'].shift(1) < 0)).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Linear_Reg_Slope'] < 0) & (stock_data['Linear_Reg_Slope'].shift(1) > 0)).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------

#-------#-------#-------#-------#-------#-------#-------#-------#-------

# Average True Range (ATR)
high_low = stock_data['High'] - stock_data['Low']
high_close = np.abs(stock_data['High'] - stock_data['Close'].shift())
low_close = np.abs(stock_data['Low'] - stock_data['Close'].shift())
ranges = pd.concat([high_low, high_close, low_close], axis=1)
true_range = np.max(ranges, axis=1)
stock_data['ATR'] = true_range.rolling(window=14).mean()
# ATR Değerindeki Değişimlere Göre Alım-Satım Sinyalleri
stock_data['ATR_Change'] = stock_data['ATR'].pct_change()
stock_data['ATR_Buy_Signal'] = (stock_data['ATR_Change'] > 0.1).astype(int)  # Örnek: ATR'de %10'luk bir artış
stock_data['ATR_Sell_Signal'] = (stock_data['ATR_Change'] < -0.1).astype(int)  # Örnek: ATR'de %10'luk bir düşüş

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Linear_Reg'] = talib.LINEARREG(stock_data['Close'], timeperiod=14)
stock_data['Linear_Reg_Buy_Signal'] = ((stock_data['Close'] > stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] > stock_data['Linear_Reg'].shift(1))).astype(int)
stock_data['Linear_Reg_Sell_Signal'] = ((stock_data['Close'] < stock_data['Linear_Reg']) & (stock_data['Linear_Reg'] < stock_data['Linear_Reg'].shift(1))).astype(int)
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['MACD'], stock_data['MACD_Signal'], _ = talib.MACD(stock_data['Close'], fastperiod=12, slowperiod=26, signalperiod=9)

# MACD Alım Sinyali (MACD, sinyal çizgisini yukarı yönde kesiyorsa)
stock_data['MACD_Buy_Signal'] = (stock_data['MACD'] > stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) <= stock_data['MACD_Signal'].shift(1))

# MACD Satım Sinyali (MACD, sinyal çizgisini aşağı yönde kesiyorsa)
stock_data['MACD_Sell_Signal'] = (stock_data['MACD'] < stock_data['MACD_Signal']) & (stock_data['MACD'].shift(1) >= stock_data['MACD_Signal'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# CCI (Commodity Channel Index)
TP = (stock_data['High'] + stock_data['Low'] + stock_data['Close']) / 3
cci = (TP - TP.rolling(window=20).mean()) / (0.015 * TP.rolling(window=20).std())
stock_data['CCI'] = cci


stock_data['CCI_Buy_Signal'] = ((stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) < -100)).astype(int)

stock_data['CCI_Sell_Signal'] = ((stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) > 100)).astype(int)


#-------#-------#-------#-------#-------#-------#-------#-------#-------
def elders_force_index(df, period=13):
    df['EFI'] = (df['Close'] - df['Close'].shift(1)) * df['Volume']
    df['EFI_Smoothed'] = df['EFI'].rolling(window=period).mean()
    return df

stock_data = elders_force_index(stock_data)
stock_data['EFI_Buy_Signal'] = ((stock_data['EFI_Smoothed'] > 0) & (stock_data['EFI_Smoothed'].shift(1) < 0)).astype(int)
stock_data['EFI_Sell_Signal'] = ((stock_data['EFI_Smoothed'] < 0) & (stock_data['EFI_Smoothed'].shift(1) > 0)).astype(int)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['RSI_14'] = talib.RSI(stock_data['Close'], timeperiod=14)

# RSI Alım Sinyali (RSI 30'dan düşükse)
stock_data['RSI_Buy_Signal'] = stock_data['RSI_14'] < 20

# RSI Satım Sinyali (RSI 70'den yüksekse)
stock_data['RSI_Sell_Signal'] = stock_data['RSI_14'] > 80
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Stoch_K'], stock_data['Stoch_D'] = talib.STOCH(stock_data['High'], stock_data['Low'], stock_data['Close'], fastk_period=14, slowk_period=3, slowk_matype=0, slowd_period=3, slowd_matype=0)

# Stochastic Alım Sinyali (%K çizgisi %D çizgisini yukarı yönde kesiyorsa)
stock_data['Stoch_Buy_Signal'] = (stock_data['Stoch_K'] > stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) <= stock_data['Stoch_D'].shift(1))

# Stochastic Satım Sinyali (%K çizgisi %D çizgisini aşağı yönde kesiyorsa)
stock_data['Stoch_Sell_Signal'] = (stock_data['Stoch_K'] < stock_data['Stoch_D']) & (stock_data['Stoch_K'].shift(1) >= stock_data['Stoch_D'].shift(1))

#-------#-------#-------#-------#-------#-------#-------#-------#-------
# EMA 12 ve EMA 26'yı hesapla
stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
stock_data['EMA_20'] = talib.EMA(stock_data['Close'], timeperiod=20)
stock_data['EMA_50'] = talib.EMA(stock_data['Close'], timeperiod=50)
stock_data['EMA_100'] = talib.EMA(stock_data['Close'], timeperiod=100)
stock_data['EMA_200'] = talib.EMA(stock_data['Close'], timeperiod=200)

# EMA Alım Sinyali (EMA 12, EMA 26'yı yukarı yönde kesiyorsa)
stock_data['EMA1226_Buy_Signal'] = (stock_data['EMA_12'] > stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) <= stock_data['EMA_26'].shift(1))

# EMA Satım Sinyali (EMA 12, EMA 26'yı aşağı yönde kesiyorsa)
stock_data['EMA1226_Sell_Signal'] = (stock_data['EMA_12'] < stock_data['EMA_26']) & (stock_data['EMA_12'].shift(1) >= stock_data['EMA_26'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
stock_data['SMA_20'] = talib.SMA(stock_data['Close'], timeperiod=20)
stock_data['SMA_100'] = talib.SMA(stock_data['Close'], timeperiod=100)
stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
stock_data['SMA_9'] = talib.SMA(stock_data['Close'], timeperiod=9)

# SMA Alım Sinyali (Fiyat, SMA 50'yi yukarı yönde kesiyorsa)
stock_data['SMA_50_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_50']) & (stock_data['Close'].shift(1) <= stock_data['SMA_50'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 50'yi aşağı yönde kesiyorsa)
stock_data['SMA_50_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_50']) & (stock_data['Close'].shift(1) >= stock_data['SMA_50'].shift(1))

# SMA Alım Sinyali (Fiyat, SMA 200'ü yukarı yönde kesiyorsa)
stock_data['SMA_200_Buy_Signal'] = (stock_data['Close'] > stock_data['SMA_200']) & (stock_data['Close'].shift(1) <= stock_data['SMA_200'].shift(1))

# SMA Satım Sinyali (Fiyat, SMA 200'ü aşağı yönde kesiyorsa)
stock_data['SMA_200_Sell_Signal'] = (stock_data['Close'] < stock_data['SMA_200']) & (stock_data['Close'].shift(1) >= stock_data['SMA_200'].shift(1))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
# Ichimoku Cloud hesaplama
nine_period_high = stock_data['High'].rolling(window=9).max()
nine_period_low = stock_data['Low'].rolling(window=9).min()
stock_data['Ichimoku_Senkou_Span_A'] = ((nine_period_high + nine_period_low) / 2).shift(26)

twenty_six_period_high = stock_data['High'].rolling(window=26).max()
twenty_six_period_low = stock_data['Low'].rolling(window=26).min()
stock_data['Ichimoku_Senkou_Span_B'] = ((twenty_six_period_high + twenty_six_period_low) / 2).shift(26)

# Ichimoku Alım Sinyali (Fiyat, bulutun üstüne çıkıyorsa)
stock_data['Ichimoku_Buy_Signal'] = (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] > stock_data['Ichimoku_Senkou_Span_B'])

# Ichimoku Satım Sinyali (Fiyat, bulutun altına düşüyorsa)
stock_data['Ichimoku_Sell_Signal'] = (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_A']) & (stock_data['Close'] < stock_data['Ichimoku_Senkou_Span_B'])
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['ADX'] = talib.ADX(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX ve +DI/-DI göstergeleri için alım/satım sinyalleri
stock_data['Plus_DI'] = talib.PLUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)
stock_data['Minus_DI'] = talib.MINUS_DI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# ADX Alım Sinyali (+DI, -DI'yi yukarı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Buy_Signal'] = ((stock_data['Plus_DI'] > stock_data['Minus_DI']) & (stock_data['Plus_DI'].shift(1) <= stock_data['Minus_DI'].shift(1)) & (stock_data['ADX'] > 25))

# ADX Satım Sinyali (-DI, +DI'yi aşağı yönde kesiyorsa ve ADX 25'ten büyükse)
stock_data['ADX_Sell_Signal'] = ((stock_data['Minus_DI'] > stock_data['Plus_DI']) & (stock_data['Minus_DI'].shift(1) <= stock_data['Plus_DI'].shift(1)) & (stock_data['ADX'] > 25))
#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['Parabolic_SAR'] = talib.SAR(stock_data['High'], stock_data['Low'], acceleration=0.02, maximum=0.2)

# Parabolic SAR Alım Sinyali (Fiyat, Parabolic SAR'ın üstüne çıkıyorsa)
stock_data['Parabolic_SAR_Buy_Signal'] = stock_data['Close'] > stock_data['Parabolic_SAR']

# Parabolic SAR Satım Sinyali (Fiyat, Parabolic SAR'ın altına düşüyorsa)
stock_data['Parabolic_SAR_Sell_Signal'] = stock_data['Close'] < stock_data['Parabolic_SAR']
#-------#-------#-------#-------#-------#-------#-------#-------#-------

stock_data['Williams_R'] = talib.WILLR(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=14)

# Williams %R Alım Sinyali (-80'den yukarı çıkıyorsa)
stock_data['Williams_R_Buy_Signal'] = (stock_data['Williams_R'] > -80) & (stock_data['Williams_R'].shift(1) <= -80)

# Williams %R Satım Sinyali (-20'den aşağı düşüyorsa)
stock_data['Williams_R_Sell_Signal'] = (stock_data['Williams_R'] < -20) & (stock_data['Williams_R'].shift(1) >= -20)

#-------#-------#-------#-------#-------#-------#-------#-------#-------
stock_data['CCI'] = talib.CCI(stock_data['High'], stock_data['Low'], stock_data['Close'], timeperiod=20)

# CCI Alım Sinyali (-100'den yukarı çıkıyorsa)
stock_data['CCI_Buy_Signal'] = (stock_data['CCI'] > -100) & (stock_data['CCI'].shift(1) <= -100)

# CCI Satım Sinyali (+100'den aşağı düşüyorsa)
stock_data['CCI_Sell_Signal'] = (stock_data['CCI'] < 100) & (stock_data['CCI'].shift(1) >= 100)





# EMA 20 Hesaplama
stock_data['EMA_20'] = stock_data['Close'].ewm(span=20, adjust=False).mean()

# EMA 20'ye Göre Alım ve Satım Sinyalleri
# Fiyat EMA 20'nin üzerine çıktığında alım sinyali
stock_data['EMA_20_Buy_Signal'] = ((stock_data['Close'] > stock_data['EMA_20']) & (stock_data['Close'].shift(1) <= stock_data['EMA_20'].shift(1))).astype(int)

# Fiyat EMA 20'nin altına düştüğünde satım sinyali
stock_data['EMA_20_Sell_Signal'] = ((stock_data['Close'] < stock_data['EMA_20']) & (stock_data['Close'].shift(1) >= stock_data['EMA_20'].shift(1))).astype(int)

# Veri setinde NaN değerlerin olup olmadığını kontrol etme
nan_check = stock_data.isna().sum()
nan_check = nan_check[nan_check > 0]  # Sadece NaN değer içeren sütunları göster

nan_check

nan_check = stock_data.isna().sum()
print(nan_check[nan_check > 0])
# İleriye doldurma yöntemiyle NaN değerleri doldurma
stock_data.fillna(method='ffill', inplace=True)

# Hala NaN değerleri varsa, bu satırları kaldırma
stock_data.dropna(inplace=True)

# Kontrol için tekrar NaN değerleri kontrol etme
nan_check = stock_data.isna().sum()
"""print(nan_check[nan_check > 0])
print(stock_data.columns)"""


# Özelliklerin seçimi ve ölçeklendirme işlemi
btc_features = stock_data[['High','Low','Open','Close','RSI_14','Linear_Reg','EMA_12',
                       'EMA_26','EMA_20','EMA_50','EMA_100','EMA_20','EMA_100',
                       'Ichimoku_Senkou_Span_A','Ichimoku_Senkou_Span_B','SMA_9',
                       'SMA_20','SMA_50','SMA_100','SMA_200','Stoch_K','Stoch_D',
                       'upper_band','lower_band']]

btc_scaler = MinMaxScaler(feature_range=(0, 1))
btc_scaled_features = btc_scaler.fit_transform(btc_features)

def btc_create_feature_dataset(dataset, look_back=36):
    X, y = [], []
    for i in range(look_back, len(dataset) - 1):
        X.append(dataset[i - look_back:i, :])
        y.append(dataset[i, 0])  # 'Close' fiyatı hedef değişken olarak kullanılıyor
    return np.array(X), np.array(y)

btc_look_back = 36
btc_X, btc_y = btc_create_feature_dataset(btc_scaled_features, btc_look_back)

btc_tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in btc_tscv.split(btc_X):
    btc_X_train, btc_X_test = btc_X[train_index], btc_X[test_index]
    btc_y_train, btc_y_test = btc_y[train_index], btc_y[test_index]

    btc_model = Sequential()
    btc_model.add(GRU(units=150, return_sequences=True, input_shape=(btc_X_train.shape[1], btc_X_train.shape[2])))
    btc_model.add(GRU(units=150, return_sequences=False))
    btc_model.add(Dense(units=1))

    btc_model.compile(optimizer='adam', loss='mean_squared_error')
    btc_model.fit(btc_X_train, btc_y_train, epochs=100, batch_size=32)

# Modelin performansını ölçme
btc_y_pred = btc_model.predict(btc_X_test)
btc_y_test_rescaled = btc_scaler.inverse_transform(np.concatenate((btc_y_test.reshape(-1,1), np.zeros(shape=(len(btc_y_test), btc_scaled_features.shape[1]-1))), axis=1))[:,0]
btc_y_pred_rescaled = btc_scaler.inverse_transform(np.concatenate((btc_y_pred, np.zeros(shape=(len(btc_y_pred), btc_scaled_features.shape[1]-1))), axis=1))[:,0]

btc_mse = mean_squared_error(btc_y_test_rescaled, btc_y_pred_rescaled)
btc_mae = mean_absolute_error(btc_y_test_rescaled, btc_y_pred_rescaled)
btc_r2 = r2_score(btc_y_test_rescaled, btc_y_pred_rescaled)

print(f'MSE: {btc_mse}')
print(f'MAE: {btc_mae}')
print(f'R2 Skoru: {btc_r2}')

# Grafik çizdirme
plt.figure(figsize=(10,6))
plt.plot(btc_y_test_rescaled, color='blue', label='Gerçek Fiyat')
plt.plot(btc_y_pred_rescaled, color='red', label='Tahmin Edilen Fiyat')
plt.title('BTC Fiyat Tahmini')
plt.xlabel('Zaman')
plt.ylabel('Fiyat')
plt.legend()
plt.show()

# Bitcoin için son veri dizisini hazırlama ve tahminde bulunma
btc_last_sequence = btc_scaled_features[-btc_look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
btc_last_sequence = np.expand_dims(btc_last_sequence, axis=0)  # Modelin beklediği shape'e getir
btc_next_prediction = btc_model.predict(btc_last_sequence)

# Tahminin ölçeklendirmesini geri alma
btc_next_prediction_rescaled = btc_scaler.inverse_transform(np.concatenate((btc_next_prediction, np.zeros(shape=(1, btc_scaled_features.shape[1]-1))), axis=1))[:,0]
# Sonraki zaman damgasını hesaplama
next_timestamp = stock_data.index[-1] + timedelta(hours=4)

print(f"Tahmin Edilen Zaman: {next_timestamp.strftime('%Y-%m-%d %H:%M:%S')}, Tahmin Edilen Fiyat BTC: {btc_next_prediction_rescaled[0]:.2f}")

import requests
import numpy as np
from datetime import datetime, timedelta
from sklearn.preprocessing import MinMaxScaler
from pytz import timezone

# Son veri dizisini hazırlama ve tahminde bulunma
def get_next_prediction_rescaled(scaled_features, look_back, model, scaler):
    last_sequence = scaled_features[-look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
    last_sequence = np.expand_dims(last_sequence, axis=0)  # Modelin beklediği shape'e getir
    next_prediction = model.predict(last_sequence)
    next_prediction_rescaled = scaler.inverse_transform(
        np.concatenate((next_prediction, np.zeros(shape=(1, scaled_features.shape[1] - 1))), axis=1))[:, 0]
    return next_prediction_rescaled

# Bitcoin için tahmin
btc_next_prediction_rescaled = get_next_prediction_rescaled(btc_scaled_features, btc_look_back, btc_model, btc_scaler)

# Ethereum için tahmin
eth_next_prediction_rescaled = get_next_prediction_rescaled(eth_scaled_features, eth_look_back, eth_model, eth_scaler)

# Tesla için tahmin
tsla_next_prediction_rescaled = get_next_prediction_rescaled(tsla_scaled_features, tsla_look_back, tsla_model, tsla_scaler)

# Solana için tahmin
sol_next_prediction_rescaled = get_next_prediction_rescaled(sol_scaled_features, sol_look_back, sol_model, sol_scaler)

# BNB için tahmin
bnb_next_prediction_rescaled = get_next_prediction_rescaled(bnb_scaled_features, bnb_look_back, bnb_model, bnb_scaler)

# Apple için tahmin
aapl_next_prediction_rescaled = get_next_prediction_rescaled(aapl_scaled_features, aapl_look_back, aapl_model, aapl_scaler)

# Sonraki zaman damgasını hesaplama
next_timestamp = stock_data.index[-1] + timedelta(hours=4)

# Zaman damgasını UTC olarak ayarlama
next_timestamp_localized = next_timestamp.tz_localize('UTC')

# Türkiye saat dilimini tanımlama
turkey_timezone = timezone('Europe/Istanbul')

# Zaman damgasını Türkiye saatine göre düzenleme
next_timestamp_turkey = next_timestamp_localized.astimezone(turkey_timezone)

# Kripto para ve hisse senedi tahminlerini tek bir JSON içinde birleştirme
predictions_data = {
    "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S'),
    "btc_predicted_price": float(btc_next_prediction_rescaled[0]),
    "eth_predicted_price": float(eth_next_prediction_rescaled[0]),
    "sol_predicted_price": float(sol_next_prediction_rescaled[0]),
    "bnb_predicted_price": float(bnb_next_prediction_rescaled[0]),
    "tsla_predicted_price": float(tsla_next_prediction_rescaled[0]),
    "aapl_predicted_price": float(aapl_next_prediction_rescaled[0]),
    "amzn_predicted_price": float(amzn_next_prediction_rescaled[0]),
    "msft_predicted_price": float(msft_next_prediction_rescaled[0]),
    "googl_predicted_price": float(googl_next_prediction_rescaled[0])
}

# JSON olarak veriyi gönderme adresi
url = "https://ugurkaval.pythonanywhere.com/post-endpoint"

# Tahminler için POST isteği yapma
response = requests.post(url, json=predictions_data)

# Yanıtı kontrol etme
if response.status_code == 200:
    print("Tahminler başarıyla gönderildi.")
    print(response.json())  # Server yanıtını yazdır
else:
    print(f"Tahminler gönderilirken bir hata oluştu. Hata kodu: {response.status_code}")

# GET isteği yaparak en son tahmini al
response = requests.get("https://ugurkaval.pythonanywhere.com/get-latest-prediction")

# Yanıtı kontrol etme
if response.status_code == 200:
    print("En son tahmin başarıyla alındı.")
    predictions = response.json()
    for key, value in predictions.items():
        print(f"{key}: {value}")
else:
    print("En son tahmini alırken bir sorun oluştu.")



def get_next_prediction_rescaled(scaled_features, look_back, model, scaler):
    last_sequence = scaled_features[-look_back:]  # Son 'look_back' sayısı kadar veri noktasını al
    last_sequence = np.expand_dims(last_sequence, axis=0)  # Modelin beklediği shape'e getir
    next_prediction = model.predict(last_sequence)
    next_prediction_rescaled = scaler.inverse_transform(
        np.concatenate((next_prediction, np.zeros(shape=(1, scaled_features.shape[1] - 1))), axis=1))[:, 0]
    return next_prediction_rescaled

btc_next_prediction_rescaled = get_next_prediction_rescaled(btc_scaled_features, btc_look_back, btc_model, btc_scaler)

eth_next_prediction_rescaled = get_next_prediction_rescaled(eth_scaled_features, eth_look_back, eth_model, eth_scaler)

tsla_next_prediction_rescaled = get_next_prediction_rescaled(tsla_scaled_features, tsla_look_back, tsla_model, tsla_scaler)

sol_next_prediction_rescaled = get_next_prediction_rescaled(sol_scaled_features, sol_look_back, sol_model, sol_scaler)

bnb_next_prediction_rescaled = get_next_prediction_rescaled(bnb_scaled_features, bnb_look_back, bnb_model, bnb_scaler)

aapl_next_prediction_rescaled = get_next_prediction_rescaled(aapl_scaled_features, aapl_look_back, aapl_model, aapl_scaler)

amzn_next_prediction_rescaled = get_next_prediction_rescaled(amzn_scaled_features, amzn_look_back, amzn_model, amzn_scaler)

msft_next_prediction_rescaled = get_next_prediction_rescaled(msft_scaled_features, msft_look_back, msft_model, msft_scaler)

googl_next_prediction_rescaled = get_next_prediction_rescaled(googl_scaled_features, googl_look_back, googl_model, googl_scaler)



# Sonraki zaman damgasını hesaplama
next_timestamp = stock_data.index[-1] + timedelta(hours=4)

# Zaman damgasını UTC olarak ayarlama
next_timestamp_localized = next_timestamp.tz_localize('UTC')

# Türkiye saat dilimini tanımlama
turkey_timezone = timezone('Europe/Istanbul')

# Zaman damgasını Türkiye saatine göre düzenleme
next_timestamp_turkey = next_timestamp_localized.astimezone(turkey_timezone)

# Kripto para ve hisse senedi tahminlerini düzenli bir JSON içinde birleştirme
predictions_data = {
    "predictions": [
        {
            "symbol": "BTC",
            "predicted_price": float(btc_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "ETH",
            "predicted_price": float(eth_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "TSLA",
            "predicted_price": float(tsla_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "SOL",
            "predicted_price": float(sol_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "BNB",
            "predicted_price": float(bnb_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "AMZN",
            "predicted_price": float(amzn_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "GOOGL",
            "predicted_price": float(googl_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "MSFT",
            "predicted_price": float(msft_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        },
        {
            "symbol": "AAPL",
            "predicted_price": float(aapl_next_prediction_rescaled[0]),
            "timestamp": next_timestamp_turkey.strftime('%Y-%m-%d %H:%M:%S')
        }
    ]
}

# JSON olarak veriyi gönderme adresi
url = "https://ugurkaval.pythonanywhere.com/post-endpoint"

# Tahminler için POST isteği yapma
response = requests.post(url, json=predictions_data)

# Yanıtı kontrol etme
if response.status_code == 200:
    print("Tahminler başarıyla gönderildi.")
    print(response.json())  # Server yanıtını yazdır
else:
    print(f"Tahminler gönderilirken bir hata oluştu. Hata kodu: {response.status_code}")

# GET isteği yaparak en son tahmini al
response = requests.get("https://ugurkaval.pythonanywhere.com/get-latest-prediction")

# Yanıtı kontrol etme
if response.status_code == 200:
    print("En son tahmin başarıyla alındı.")
    predictions = response.json()
    for prediction in predictions["predictions"]:
        print(f"{prediction['symbol']} Tahmin Edilen Fiyat: {prediction['predicted_price']}, Zaman Damgası: {prediction['timestamp']}")
else:
    print("En son tahmini alırken bir sorun oluştu.")